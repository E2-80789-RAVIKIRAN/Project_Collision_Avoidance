
tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003a38  08003a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a48  08003a48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a50  08003a50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a50  08003a50  00013a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a54  08003a54  00013a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ab29  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001942  00000000  00000000  0002aba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ac0  00000000  00000000  0002c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000084c  00000000  00000000  0002cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020146  00000000  00000000  0002d7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b598  00000000  00000000  0004d942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c717f  00000000  00000000  00058eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e54  00000000  00000000  0012005c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00122eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a20 	.word	0x08003a20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a20 	.word	0x08003a20

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b970 	b.w	8000b2c <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9e08      	ldr	r6, [sp, #32]
 800086a:	460d      	mov	r5, r1
 800086c:	4604      	mov	r4, r0
 800086e:	460f      	mov	r7, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14a      	bne.n	800090a <__udivmoddi4+0xa6>
 8000874:	428a      	cmp	r2, r1
 8000876:	4694      	mov	ip, r2
 8000878:	d965      	bls.n	8000946 <__udivmoddi4+0xe2>
 800087a:	fab2 f382 	clz	r3, r2
 800087e:	b143      	cbz	r3, 8000892 <__udivmoddi4+0x2e>
 8000880:	fa02 fc03 	lsl.w	ip, r2, r3
 8000884:	f1c3 0220 	rsb	r2, r3, #32
 8000888:	409f      	lsls	r7, r3
 800088a:	fa20 f202 	lsr.w	r2, r0, r2
 800088e:	4317      	orrs	r7, r2
 8000890:	409c      	lsls	r4, r3
 8000892:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000896:	fa1f f58c 	uxth.w	r5, ip
 800089a:	fbb7 f1fe 	udiv	r1, r7, lr
 800089e:	0c22      	lsrs	r2, r4, #16
 80008a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008a8:	fb01 f005 	mul.w	r0, r1, r5
 80008ac:	4290      	cmp	r0, r2
 80008ae:	d90a      	bls.n	80008c6 <__udivmoddi4+0x62>
 80008b0:	eb1c 0202 	adds.w	r2, ip, r2
 80008b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008b8:	f080 811c 	bcs.w	8000af4 <__udivmoddi4+0x290>
 80008bc:	4290      	cmp	r0, r2
 80008be:	f240 8119 	bls.w	8000af4 <__udivmoddi4+0x290>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4462      	add	r2, ip
 80008c6:	1a12      	subs	r2, r2, r0
 80008c8:	b2a4      	uxth	r4, r4
 80008ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008d6:	fb00 f505 	mul.w	r5, r0, r5
 80008da:	42a5      	cmp	r5, r4
 80008dc:	d90a      	bls.n	80008f4 <__udivmoddi4+0x90>
 80008de:	eb1c 0404 	adds.w	r4, ip, r4
 80008e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e6:	f080 8107 	bcs.w	8000af8 <__udivmoddi4+0x294>
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	f240 8104 	bls.w	8000af8 <__udivmoddi4+0x294>
 80008f0:	4464      	add	r4, ip
 80008f2:	3802      	subs	r0, #2
 80008f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	2100      	movs	r1, #0
 80008fc:	b11e      	cbz	r6, 8000906 <__udivmoddi4+0xa2>
 80008fe:	40dc      	lsrs	r4, r3
 8000900:	2300      	movs	r3, #0
 8000902:	e9c6 4300 	strd	r4, r3, [r6]
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	428b      	cmp	r3, r1
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0xbc>
 800090e:	2e00      	cmp	r6, #0
 8000910:	f000 80ed 	beq.w	8000aee <__udivmoddi4+0x28a>
 8000914:	2100      	movs	r1, #0
 8000916:	e9c6 0500 	strd	r0, r5, [r6]
 800091a:	4608      	mov	r0, r1
 800091c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000920:	fab3 f183 	clz	r1, r3
 8000924:	2900      	cmp	r1, #0
 8000926:	d149      	bne.n	80009bc <__udivmoddi4+0x158>
 8000928:	42ab      	cmp	r3, r5
 800092a:	d302      	bcc.n	8000932 <__udivmoddi4+0xce>
 800092c:	4282      	cmp	r2, r0
 800092e:	f200 80f8 	bhi.w	8000b22 <__udivmoddi4+0x2be>
 8000932:	1a84      	subs	r4, r0, r2
 8000934:	eb65 0203 	sbc.w	r2, r5, r3
 8000938:	2001      	movs	r0, #1
 800093a:	4617      	mov	r7, r2
 800093c:	2e00      	cmp	r6, #0
 800093e:	d0e2      	beq.n	8000906 <__udivmoddi4+0xa2>
 8000940:	e9c6 4700 	strd	r4, r7, [r6]
 8000944:	e7df      	b.n	8000906 <__udivmoddi4+0xa2>
 8000946:	b902      	cbnz	r2, 800094a <__udivmoddi4+0xe6>
 8000948:	deff      	udf	#255	; 0xff
 800094a:	fab2 f382 	clz	r3, r2
 800094e:	2b00      	cmp	r3, #0
 8000950:	f040 8090 	bne.w	8000a74 <__udivmoddi4+0x210>
 8000954:	1a8a      	subs	r2, r1, r2
 8000956:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800095a:	fa1f fe8c 	uxth.w	lr, ip
 800095e:	2101      	movs	r1, #1
 8000960:	fbb2 f5f7 	udiv	r5, r2, r7
 8000964:	fb07 2015 	mls	r0, r7, r5, r2
 8000968:	0c22      	lsrs	r2, r4, #16
 800096a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800096e:	fb0e f005 	mul.w	r0, lr, r5
 8000972:	4290      	cmp	r0, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x124>
 8000976:	eb1c 0202 	adds.w	r2, ip, r2
 800097a:	f105 38ff 	add.w	r8, r5, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x122>
 8000980:	4290      	cmp	r0, r2
 8000982:	f200 80cb 	bhi.w	8000b1c <__udivmoddi4+0x2b8>
 8000986:	4645      	mov	r5, r8
 8000988:	1a12      	subs	r2, r2, r0
 800098a:	b2a4      	uxth	r4, r4
 800098c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000990:	fb07 2210 	mls	r2, r7, r0, r2
 8000994:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000998:	fb0e fe00 	mul.w	lr, lr, r0
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x14e>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009a8:	d202      	bcs.n	80009b0 <__udivmoddi4+0x14c>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	f200 80bb 	bhi.w	8000b26 <__udivmoddi4+0x2c2>
 80009b0:	4610      	mov	r0, r2
 80009b2:	eba4 040e 	sub.w	r4, r4, lr
 80009b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ba:	e79f      	b.n	80008fc <__udivmoddi4+0x98>
 80009bc:	f1c1 0720 	rsb	r7, r1, #32
 80009c0:	408b      	lsls	r3, r1
 80009c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ca:	fa05 f401 	lsl.w	r4, r5, r1
 80009ce:	fa20 f307 	lsr.w	r3, r0, r7
 80009d2:	40fd      	lsrs	r5, r7
 80009d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009d8:	4323      	orrs	r3, r4
 80009da:	fbb5 f8f9 	udiv	r8, r5, r9
 80009de:	fa1f fe8c 	uxth.w	lr, ip
 80009e2:	fb09 5518 	mls	r5, r9, r8, r5
 80009e6:	0c1c      	lsrs	r4, r3, #16
 80009e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009ec:	fb08 f50e 	mul.w	r5, r8, lr
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	fa00 f001 	lsl.w	r0, r0, r1
 80009fa:	d90b      	bls.n	8000a14 <__udivmoddi4+0x1b0>
 80009fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000a00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a04:	f080 8088 	bcs.w	8000b18 <__udivmoddi4+0x2b4>
 8000a08:	42a5      	cmp	r5, r4
 8000a0a:	f240 8085 	bls.w	8000b18 <__udivmoddi4+0x2b4>
 8000a0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a12:	4464      	add	r4, ip
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	b29d      	uxth	r5, r3
 8000a18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a28:	45a6      	cmp	lr, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x1da>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a34:	d26c      	bcs.n	8000b10 <__udivmoddi4+0x2ac>
 8000a36:	45a6      	cmp	lr, r4
 8000a38:	d96a      	bls.n	8000b10 <__udivmoddi4+0x2ac>
 8000a3a:	3b02      	subs	r3, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a42:	fba3 9502 	umull	r9, r5, r3, r2
 8000a46:	eba4 040e 	sub.w	r4, r4, lr
 8000a4a:	42ac      	cmp	r4, r5
 8000a4c:	46c8      	mov	r8, r9
 8000a4e:	46ae      	mov	lr, r5
 8000a50:	d356      	bcc.n	8000b00 <__udivmoddi4+0x29c>
 8000a52:	d053      	beq.n	8000afc <__udivmoddi4+0x298>
 8000a54:	b156      	cbz	r6, 8000a6c <__udivmoddi4+0x208>
 8000a56:	ebb0 0208 	subs.w	r2, r0, r8
 8000a5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a62:	40ca      	lsrs	r2, r1
 8000a64:	40cc      	lsrs	r4, r1
 8000a66:	4317      	orrs	r7, r2
 8000a68:	e9c6 7400 	strd	r7, r4, [r6]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a74:	f1c3 0120 	rsb	r1, r3, #32
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a80:	fa25 f101 	lsr.w	r1, r5, r1
 8000a84:	409d      	lsls	r5, r3
 8000a86:	432a      	orrs	r2, r5
 8000a88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8c:	fa1f fe8c 	uxth.w	lr, ip
 8000a90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a94:	fb07 1510 	mls	r5, r7, r0, r1
 8000a98:	0c11      	lsrs	r1, r2, #16
 8000a9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000aa2:	428d      	cmp	r5, r1
 8000aa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x258>
 8000aaa:	eb1c 0101 	adds.w	r1, ip, r1
 8000aae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ab2:	d22f      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab4:	428d      	cmp	r5, r1
 8000ab6:	d92d      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab8:	3802      	subs	r0, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	1b49      	subs	r1, r1, r5
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ac4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ac8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000acc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ad0:	4291      	cmp	r1, r2
 8000ad2:	d908      	bls.n	8000ae6 <__udivmoddi4+0x282>
 8000ad4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000adc:	d216      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000ade:	4291      	cmp	r1, r2
 8000ae0:	d914      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000ae2:	3d02      	subs	r5, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a52      	subs	r2, r2, r1
 8000ae8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aec:	e738      	b.n	8000960 <__udivmoddi4+0xfc>
 8000aee:	4631      	mov	r1, r6
 8000af0:	4630      	mov	r0, r6
 8000af2:	e708      	b.n	8000906 <__udivmoddi4+0xa2>
 8000af4:	4639      	mov	r1, r7
 8000af6:	e6e6      	b.n	80008c6 <__udivmoddi4+0x62>
 8000af8:	4610      	mov	r0, r2
 8000afa:	e6fb      	b.n	80008f4 <__udivmoddi4+0x90>
 8000afc:	4548      	cmp	r0, r9
 8000afe:	d2a9      	bcs.n	8000a54 <__udivmoddi4+0x1f0>
 8000b00:	ebb9 0802 	subs.w	r8, r9, r2
 8000b04:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	e7a3      	b.n	8000a54 <__udivmoddi4+0x1f0>
 8000b0c:	4645      	mov	r5, r8
 8000b0e:	e7ea      	b.n	8000ae6 <__udivmoddi4+0x282>
 8000b10:	462b      	mov	r3, r5
 8000b12:	e794      	b.n	8000a3e <__udivmoddi4+0x1da>
 8000b14:	4640      	mov	r0, r8
 8000b16:	e7d1      	b.n	8000abc <__udivmoddi4+0x258>
 8000b18:	46d0      	mov	r8, sl
 8000b1a:	e77b      	b.n	8000a14 <__udivmoddi4+0x1b0>
 8000b1c:	3d02      	subs	r5, #2
 8000b1e:	4462      	add	r2, ip
 8000b20:	e732      	b.n	8000988 <__udivmoddi4+0x124>
 8000b22:	4608      	mov	r0, r1
 8000b24:	e70a      	b.n	800093c <__udivmoddi4+0xd8>
 8000b26:	4464      	add	r4, ip
 8000b28:	3802      	subs	r0, #2
 8000b2a:	e742      	b.n	80009b2 <__udivmoddi4+0x14e>

08000b2c <__aeabi_idiv0>:
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <usDelay>:
//	__HAL_TIM_SET_COUNTER(&htim1, 0);
//	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
//}

void usDelay(uint32_t uSec)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d801      	bhi.n	8000b42 <usDelay+0x12>
 8000b3e:	2302      	movs	r3, #2
 8000b40:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <usDelay+0x60>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <usDelay+0x60>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <usDelay+0x60>)
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <usDelay+0x60>)
 8000b56:	f023 0301 	bic.w	r3, r3, #1
 8000b5a:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <usDelay+0x60>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <usDelay+0x60>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8000b68:	bf00      	nop
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <usDelay+0x60>)
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d1f9      	bne.n	8000b6a <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <usDelay+0x60>)
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <usDelay+0x60>)
 8000b7c:	f023 0301 	bic.w	r3, r3, #1
 8000b80:	6113      	str	r3, [r2, #16]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40010000 	.word	0x40010000

08000b94 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	Switch_Flag = 1;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000baa:	4804      	ldr	r0, [pc, #16]	; (8000bbc <HAL_GPIO_EXTI_Callback+0x28>)
 8000bac:	f001 fc8e 	bl	80024cc <HAL_GPIO_WritePin>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000098 	.word	0x20000098
 8000bbc:	40020c00 	.word	0x40020c00

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//char ADCBuffer[16];
	uint16_t adcValue=0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	807b      	strh	r3, [r7, #2]
	uint32_t numTicks = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 fbd1 	bl	8001374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f8c9 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f000 f9db 	bl	8000f90 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000bda:	f000 f92f 	bl	8000e3c <MX_CAN1_Init>
  MX_TIM1_Init();
 8000bde:	f000 f981 	bl	8000ee4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
HAL_CAN_Start(&hcan1);
 8000be2:	4857      	ldr	r0, [pc, #348]	; (8000d40 <main+0x180>)
 8000be4:	f000 fe38 	bl	8001858 <HAL_CAN_Start>
HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000be8:	2100      	movs	r1, #0
 8000bea:	4856      	ldr	r0, [pc, #344]	; (8000d44 <main+0x184>)
 8000bec:	f002 f96e 	bl	8002ecc <HAL_TIM_IC_Start_IT>
HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4853      	ldr	r0, [pc, #332]	; (8000d40 <main+0x180>)
 8000bf4:	f000 ff4f 	bl	8001a96 <HAL_CAN_ActivateNotification>
HAL_Delay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f000 fc2d 	bl	8001458 <HAL_Delay>
HAL_Delay(100);
 8000bfe:	2064      	movs	r0, #100	; 0x64
 8000c00:	f000 fc2a 	bl	8001458 <HAL_Delay>

TxHeader.DLC = 4;
 8000c04:	4b50      	ldr	r3, [pc, #320]	; (8000d48 <main+0x188>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	611a      	str	r2, [r3, #16]
TxHeader.RTR = CAN_RTR_DATA;
 8000c0a:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <main+0x188>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
TxHeader.IDE = CAN_ID_STD;
 8000c10:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <main+0x188>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
TxHeader.ExtId = 0x00;
 8000c16:	4b4c      	ldr	r3, [pc, #304]	; (8000d48 <main+0x188>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
TxHeader.StdId = 0x0AA;
 8000c1c:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <main+0x188>)
 8000c1e:	22aa      	movs	r2, #170	; 0xaa
 8000c20:	601a      	str	r2, [r3, #0]
TxHeader.TransmitGlobalTime = DISABLE;
 8000c22:	4b49      	ldr	r3, [pc, #292]	; (8000d48 <main+0x188>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	751a      	strb	r2, [r3, #20]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(Switch_Flag == 1){
 8000c28:	4b48      	ldr	r3, [pc, #288]	; (8000d4c <main+0x18c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d178      	bne.n	8000d22 <main+0x162>
			//Set TRIG to LOW for few uSec
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c36:	4846      	ldr	r0, [pc, #280]	; (8000d50 <main+0x190>)
 8000c38:	f001 fc48 	bl	80024cc <HAL_GPIO_WritePin>
			usDelay(3);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff ff77 	bl	8000b30 <usDelay>

			//*** START Ultrasonic measure routine ***//
			//1. Output 10 usec TRIG
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c48:	4841      	ldr	r0, [pc, #260]	; (8000d50 <main+0x190>)
 8000c4a:	f001 fc3f 	bl	80024cc <HAL_GPIO_WritePin>
			usDelay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f7ff ff6e 	bl	8000b30 <usDelay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5a:	483d      	ldr	r0, [pc, #244]	; (8000d50 <main+0x190>)
 8000c5c:	f001 fc36 	bl	80024cc <HAL_GPIO_WritePin>

			//2. Wait for ECHO pin rising edge
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_RESET);
 8000c60:	bf00      	nop
 8000c62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c66:	483a      	ldr	r0, [pc, #232]	; (8000d50 <main+0x190>)
 8000c68:	f001 fc18 	bl	800249c <HAL_GPIO_ReadPin>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f7      	beq.n	8000c62 <main+0xa2>

			//3. Start measuring ECHO pulse width in usec
			numTicks = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET)
 8000c76:	e005      	b.n	8000c84 <main+0xc4>
			{
				numTicks++;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	607b      	str	r3, [r7, #4]
				usDelay(2); //2.8usec
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f7ff ff56 	bl	8000b30 <usDelay>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET)
 8000c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c88:	4831      	ldr	r0, [pc, #196]	; (8000d50 <main+0x190>)
 8000c8a:	f001 fc07 	bl	800249c <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d0f1      	beq.n	8000c78 <main+0xb8>
			};

			//4. Estimate distance in cm
			distance = (numTicks + 0.0f)*2.8*SpeedofSound;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	ee07 3a90 	vmov	s15, r3
 8000c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c9e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000d54 <main+0x194>
 8000ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ca6:	ee17 0a90 	vmov	r0, s15
 8000caa:	f7ff fd1b 	bl	80006e4 <__aeabi_f2d>
 8000cae:	a322      	add	r3, pc, #136	; (adr r3, 8000d38 <main+0x178>)
 8000cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb4:	f7ff fa88 	bl	80001c8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4614      	mov	r4, r2
 8000cbe:	461d      	mov	r5, r3
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <main+0x198>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd0e 	bl	80006e4 <__aeabi_f2d>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	f7ff fa7a 	bl	80001c8 <__aeabi_dmul>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4610      	mov	r0, r2
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f7ff fd5a 	bl	8000794 <__aeabi_d2f>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <main+0x19c>)
 8000ce4:	6013      	str	r3, [r2, #0]

	  	  	TxData[0] = adcValue;	//yellow
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <main+0x1a0>)
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	8013      	strh	r3, [r2, #0]
	  	  	TxData[1] = distance;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <main+0x19c>)
 8000cee:	edd3 7a00 	vldr	s15, [r3]
 8000cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf6:	ee17 3a90 	vmov	r3, s15
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <main+0x1a0>)
 8000cfe:	805a      	strh	r2, [r3, #2]
	  	  	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <main+0x1a4>)
 8000d02:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <main+0x1a0>)
 8000d04:	4910      	ldr	r1, [pc, #64]	; (8000d48 <main+0x188>)
 8000d06:	480e      	ldr	r0, [pc, #56]	; (8000d40 <main+0x180>)
 8000d08:	f000 fdea 	bl	80018e0 <HAL_CAN_AddTxMessage>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <main+0x156>
	  	  	  	Error_Handler();
 8000d12:	f000 f9df 	bl	80010d4 <Error_Handler>
	  	  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <main+0x190>)
 8000d1e:	f001 fbd5 	bl	80024cc <HAL_GPIO_WritePin>
	  	  	}
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	480a      	ldr	r0, [pc, #40]	; (8000d50 <main+0x190>)
 8000d28:	f001 fbe9 	bl	80024fe <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d30:	f000 fb92 	bl	8001458 <HAL_Delay>
	  if(Switch_Flag == 1){
 8000d34:	e778      	b.n	8000c28 <main+0x68>
 8000d36:	bf00      	nop
 8000d38:	66666666 	.word	0x66666666
 8000d3c:	40066666 	.word	0x40066666
 8000d40:	20000028 	.word	0x20000028
 8000d44:	20000050 	.word	0x20000050
 8000d48:	2000009c 	.word	0x2000009c
 8000d4c:	20000098 	.word	0x20000098
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	00000000 	.word	0x00000000
 8000d58:	3c8c7e28 	.word	0x3c8c7e28
 8000d5c:	200000bc 	.word	0x200000bc
 8000d60:	200000b4 	.word	0x200000b4
 8000d64:	200000b8 	.word	0x200000b8

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b094      	sub	sp, #80	; 0x50
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	2230      	movs	r2, #48	; 0x30
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 fe26 	bl	80039c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <SystemClock_Config+0xcc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <SystemClock_Config+0xcc>)
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <SystemClock_Config+0xcc>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <SystemClock_Config+0xd0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <SystemClock_Config+0xd0>)
 8000db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <SystemClock_Config+0xd0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ddc:	2348      	movs	r3, #72	; 0x48
 8000dde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000de4:	2307      	movs	r3, #7
 8000de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 fbb9 	bl	8002564 <HAL_RCC_OscConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000df8:	f000 f96c 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e00:	2302      	movs	r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2102      	movs	r1, #2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fe1a 	bl	8002a54 <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e26:	f000 f955 	bl	80010d4 <Error_Handler>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3750      	adds	r7, #80	; 0x50
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40007000 	.word	0x40007000

08000e3c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <MX_CAN1_Init+0xa4>)
 8000e46:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e4a:	2212      	movs	r2, #18
 8000e4c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e60:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000e8e:	f000 fb07 	bl	80014a0 <HAL_CAN_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000e98:	f000 f91c 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
    canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
    canFilterConfig.SlaveStartFilterBank=14;
 8000ea0:	230e      	movs	r3, #14
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    canFilterConfig.FilterBank=2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	617b      	str	r3, [r7, #20]
    canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
    canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
    canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
    canFilterConfig.FilterMaskIdLow=0x0000;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
    canFilterConfig.FilterMaskIdHigh=0xFF00;
 8000eb8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000ebc:	60bb      	str	r3, [r7, #8]
    canFilterConfig.FilterIdLow=0x0000;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
    canFilterConfig.FilterIdHigh=0x1500;
 8000ec2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000ec6:	603b      	str	r3, [r7, #0]
    HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <MX_CAN1_Init+0xa0>)
 8000ece:	f000 fbe3 	bl	8001698 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000028 	.word	0x20000028
 8000ee0:	40006400 	.word	0x40006400

08000ee4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_TIM1_Init+0xa4>)
 8000f02:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <MX_TIM1_Init+0xa8>)
 8000f04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_TIM1_Init+0xa4>)
 8000f08:	2247      	movs	r2, #71	; 0x47
 8000f0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_TIM1_Init+0xa4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_TIM1_Init+0xa4>)
 8000f14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_TIM1_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_TIM1_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_TIM1_Init+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f2c:	4816      	ldr	r0, [pc, #88]	; (8000f88 <MX_TIM1_Init+0xa4>)
 8000f2e:	f001 ff7d 	bl	8002e2c <HAL_TIM_IC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f38:	f000 f8cc 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480f      	ldr	r0, [pc, #60]	; (8000f88 <MX_TIM1_Init+0xa4>)
 8000f4c:	f002 fcac 	bl	80038a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f56:	f000 f8bd 	bl	80010d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_TIM1_Init+0xa4>)
 8000f72:	f002 f9db 	bl	800332c <HAL_TIM_IC_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000f7c:	f000 f8aa 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000050 	.word	0x20000050
 8000f8c:	40010000 	.word	0x40010000

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <MX_GPIO_Init+0x118>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a3e      	ldr	r2, [pc, #248]	; (80010a8 <MX_GPIO_Init+0x118>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b3c      	ldr	r3, [pc, #240]	; (80010a8 <MX_GPIO_Init+0x118>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <MX_GPIO_Init+0x118>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a37      	ldr	r2, [pc, #220]	; (80010a8 <MX_GPIO_Init+0x118>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <MX_GPIO_Init+0x118>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <MX_GPIO_Init+0x118>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <MX_GPIO_Init+0x118>)
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <MX_GPIO_Init+0x118>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <MX_GPIO_Init+0x118>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <MX_GPIO_Init+0x118>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <MX_GPIO_Init+0x118>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MX_GPIO_Init+0x118>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <MX_GPIO_Init+0x118>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_GPIO_Init+0x118>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HC_SR04_TrigPin_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 8001038:	481c      	ldr	r0, [pc, #112]	; (80010ac <MX_GPIO_Init+0x11c>)
 800103a:	f001 fa47 	bl	80024cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800103e:	2301      	movs	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001042:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <MX_GPIO_Init+0x120>)
 8001054:	f001 f886 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_SR04_EchoPin_Pin */
  GPIO_InitStruct.Pin = HC_SR04_EchoPin_Pin;
 8001058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HC_SR04_EchoPin_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	480f      	ldr	r0, [pc, #60]	; (80010ac <MX_GPIO_Init+0x11c>)
 800106e:	f001 f879 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : HC_SR04_TrigPin_Pin PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = HC_SR04_TrigPin_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001072:	f44f 4372 	mov.w	r3, #61952	; 0xf200
 8001076:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <MX_GPIO_Init+0x11c>)
 800108c:	f001 f86a 	bl	8002164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2006      	movs	r0, #6
 8001096:	f001 f82e 	bl	80020f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800109a:	2006      	movs	r0, #6
 800109c:	f001 f847 	bl	800212e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40020000 	.word	0x40020000

080010b4 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80010c4:	f001 fa02 	bl	80024cc <HAL_GPIO_WritePin>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	e7fe      	b.n	80010dc <Error_Handler+0x8>
	...

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_MspInit+0x4c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a0f      	ldr	r2, [pc, #60]	; (800112c <HAL_MspInit+0x4c>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_MspInit+0x4c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_MspInit+0x4c>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_MspInit+0x4c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800111e:	2007      	movs	r0, #7
 8001120:	f000 ffde 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800

08001130 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <HAL_CAN_MspInit+0x94>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d134      	bne.n	80011bc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_CAN_MspInit+0x98>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <HAL_CAN_MspInit+0x98>)
 800115c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_CAN_MspInit+0x98>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_CAN_MspInit+0x98>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_CAN_MspInit+0x98>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_CAN_MspInit+0x98>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800118a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800119c:	2309      	movs	r3, #9
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <HAL_CAN_MspInit+0x9c>)
 80011a8:	f000 ffdc 	bl	8002164 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2014      	movs	r0, #20
 80011b2:	f000 ffa0 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011b6:	2014      	movs	r0, #20
 80011b8:	f000 ffb9 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	; 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40006400 	.word	0x40006400
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020400 	.word	0x40020400

080011d0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_TIM_IC_MspInit+0x94>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d134      	bne.n	800125c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_TIM_IC_MspInit+0x98>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <HAL_TIM_IC_MspInit+0x98>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_TIM_IC_MspInit+0x98>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_TIM_IC_MspInit+0x98>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_TIM_IC_MspInit+0x98>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_TIM_IC_MspInit+0x98>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800122a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800123c:	2301      	movs	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4809      	ldr	r0, [pc, #36]	; (800126c <HAL_TIM_IC_MspInit+0x9c>)
 8001248:	f000 ff8c 	bl	8002164 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	201b      	movs	r0, #27
 8001252:	f000 ff50 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001256:	201b      	movs	r0, #27
 8001258:	f000 ff69 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40010000 	.word	0x40010000
 8001268:	40023800 	.word	0x40023800
 800126c:	40021000 	.word	0x40021000

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012bc:	f000 f8ac 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f001 f933 	bl	8002534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <CAN1_RX0_IRQHandler+0x10>)
 80012da:	f000 fc02 	bl	8001ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000028 	.word	0x20000028

080012e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM1_CC_IRQHandler+0x10>)
 80012ee:	f001 ff15 	bl	800311c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000050 	.word	0x20000050

080012fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001326:	490e      	ldr	r1, [pc, #56]	; (8001360 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800133c:	4c0b      	ldr	r4, [pc, #44]	; (800136c <LoopFillZerobss+0x26>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800134a:	f7ff ffd7 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f002 fb43 	bl	80039d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001352:	f7ff fc35 	bl	8000bc0 <main>
  bx  lr    
 8001356:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001364:	08003a58 	.word	0x08003a58
  ldr r2, =_sbss
 8001368:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800136c:	200000c4 	.word	0x200000c4

08001370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC_IRQHandler>
	...

08001374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <HAL_Init+0x40>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_Init+0x40>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_Init+0x40>)
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 fe9f 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 f808 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a8:	f7ff fe9a 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023c00 	.word	0x40023c00

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_InitTick+0x54>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_InitTick+0x58>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 feb7 	bl	800214a <HAL_SYSTICK_Config>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00e      	b.n	8001404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	d80a      	bhi.n	8001402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f000 fe7f 	bl	80020f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <HAL_InitTick+0x5c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000000 	.word	0x20000000
 8001410:	20000008 	.word	0x20000008
 8001414:	20000004 	.word	0x20000004

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008
 800143c:	200000c0 	.word	0x200000c0

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	200000c0 	.word	0x200000c0

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffde 	bl	8001440 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000008 	.word	0x20000008

080014a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0ed      	b.n	800168e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fe36 	bl	8001130 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff ffb4 	bl	8001440 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014da:	e012      	b.n	8001502 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014dc:	f7ff ffb0 	bl	8001440 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b0a      	cmp	r3, #10
 80014e8:	d90b      	bls.n	8001502 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2205      	movs	r2, #5
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0c5      	b.n	800168e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0e5      	beq.n	80014dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0202 	bic.w	r2, r2, #2
 800151e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001520:	f7ff ff8e 	bl	8001440 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001526:	e012      	b.n	800154e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001528:	f7ff ff8a 	bl	8001440 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b0a      	cmp	r3, #10
 8001534:	d90b      	bls.n	800154e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2205      	movs	r2, #5
 8001546:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e09f      	b.n	800168e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e5      	bne.n	8001528 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7e1b      	ldrb	r3, [r3, #24]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e007      	b.n	8001586 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7e5b      	ldrb	r3, [r3, #25]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e007      	b.n	80015b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7e9b      	ldrb	r3, [r3, #26]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d108      	bne.n	80015ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e007      	b.n	80015da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0220 	bic.w	r2, r2, #32
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7edb      	ldrb	r3, [r3, #27]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d108      	bne.n	80015f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0210 	bic.w	r2, r2, #16
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e007      	b.n	8001604 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0210 	orr.w	r2, r2, #16
 8001602:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7f1b      	ldrb	r3, [r3, #28]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0208 	orr.w	r2, r2, #8
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e007      	b.n	800162e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0208 	bic.w	r2, r2, #8
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7f5b      	ldrb	r3, [r3, #29]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0204 	orr.w	r2, r2, #4
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e007      	b.n	8001658 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0204 	bic.w	r2, r2, #4
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	ea42 0103 	orr.w	r1, r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	1e5a      	subs	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016b0:	7cfb      	ldrb	r3, [r7, #19]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d003      	beq.n	80016be <HAL_CAN_ConfigFilter+0x26>
 80016b6:	7cfb      	ldrb	r3, [r7, #19]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	f040 80be 	bne.w	800183a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80016be:	4b65      	ldr	r3, [pc, #404]	; (8001854 <HAL_CAN_ConfigFilter+0x1bc>)
 80016c0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	431a      	orrs	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	2201      	movs	r2, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	401a      	ands	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d123      	bne.n	8001768 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001742:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3248      	adds	r2, #72	; 0x48
 8001748:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800175c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800175e:	6979      	ldr	r1, [r7, #20]
 8001760:	3348      	adds	r3, #72	; 0x48
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	440b      	add	r3, r1
 8001766:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d122      	bne.n	80017b6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001790:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3248      	adds	r2, #72	; 0x48
 8001796:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ac:	6979      	ldr	r1, [r7, #20]
 80017ae:	3348      	adds	r3, #72	; 0x48
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	401a      	ands	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80017d0:	e007      	b.n	80017e2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	431a      	orrs	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80017fc:	e007      	b.n	800180e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	431a      	orrs	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	431a      	orrs	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800182c:	f023 0201 	bic.w	r2, r3, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e006      	b.n	8001848 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40006400 	.word	0x40006400

08001858 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b01      	cmp	r3, #1
 800186a:	d12e      	bne.n	80018ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001884:	f7ff fddc 	bl	8001440 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800188a:	e012      	b.n	80018b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800188c:	f7ff fdd8 	bl	8001440 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b0a      	cmp	r3, #10
 8001898:	d90b      	bls.n	80018b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2205      	movs	r2, #5
 80018aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e012      	b.n	80018d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1e5      	bne.n	800188c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e006      	b.n	80018d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
  }
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d003      	beq.n	800190c <HAL_CAN_AddTxMessage+0x2c>
 8001904:	7ffb      	ldrb	r3, [r7, #31]
 8001906:	2b02      	cmp	r3, #2
 8001908:	f040 80b8 	bne.w	8001a7c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10a      	bne.n	800192c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80a0 	beq.w	8001a6c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	0e1b      	lsrs	r3, r3, #24
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d907      	bls.n	800194c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e09e      	b.n	8001a8a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800194c:	2201      	movs	r2, #1
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	409a      	lsls	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10d      	bne.n	800197a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	6809      	ldr	r1, [r1, #0]
 800196c:	431a      	orrs	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3318      	adds	r3, #24
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	440b      	add	r3, r1
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e00f      	b.n	800199a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001984:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800198a:	68f9      	ldr	r1, [r7, #12]
 800198c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800198e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3318      	adds	r3, #24
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	440b      	add	r3, r1
 8001998:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3318      	adds	r3, #24
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	440b      	add	r3, r1
 80019aa:	3304      	adds	r3, #4
 80019ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	7d1b      	ldrb	r3, [r3, #20]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d111      	bne.n	80019da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3318      	adds	r3, #24
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	3304      	adds	r3, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	6811      	ldr	r1, [r2, #0]
 80019ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3318      	adds	r3, #24
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	440b      	add	r3, r1
 80019d6:	3304      	adds	r3, #4
 80019d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3307      	adds	r3, #7
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	061a      	lsls	r2, r3, #24
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3306      	adds	r3, #6
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3305      	adds	r3, #5
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	4313      	orrs	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	3204      	adds	r2, #4
 80019fa:	7812      	ldrb	r2, [r2, #0]
 80019fc:	4610      	mov	r0, r2
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	6811      	ldr	r1, [r2, #0]
 8001a02:	ea43 0200 	orr.w	r2, r3, r0
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3303      	adds	r3, #3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	061a      	lsls	r2, r3, #24
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3301      	adds	r3, #1
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	4610      	mov	r0, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	6811      	ldr	r1, [r2, #0]
 8001a38:	ea43 0200 	orr.w	r2, r3, r0
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	440b      	add	r3, r1
 8001a42:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a46:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3318      	adds	r3, #24
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	6811      	ldr	r1, [r2, #0]
 8001a5a:	f043 0201 	orr.w	r2, r3, #1
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3318      	adds	r3, #24
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	440b      	add	r3, r1
 8001a66:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e00e      	b.n	8001a8a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e006      	b.n	8001a8a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
  }
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d002      	beq.n	8001ab4 <HAL_CAN_ActivateNotification+0x1e>
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d109      	bne.n	8001ac8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6959      	ldr	r1, [r3, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e006      	b.n	8001ad6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
  }
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b08a      	sub	sp, #40	; 0x28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d07c      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d023      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2201      	movs	r2, #1
 8001b38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fab5 	bl	80010b4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b4a:	e016      	b.n	8001b7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5e:	e00c      	b.n	8001b7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
 8001b72:	e002      	b.n	8001b7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f97f 	bl	8001e78 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d024      	beq.n	8001bce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f959 	bl	8001e50 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b9e:	e016      	b.n	8001bce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d004      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb2:	e00c      	b.n	8001bce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d004      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc6:	e002      	b.n	8001bce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f95f 	bl	8001e8c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d024      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f939 	bl	8001e64 <HAL_CAN_TxMailbox2CompleteCallback>
 8001bf2:	e016      	b.n	8001c22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
 8001c06:	e00c      	b.n	8001c22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	e002      	b.n	8001c22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f93f 	bl	8001ea0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00c      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2210      	movs	r2, #16
 8001c44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2208      	movs	r2, #8
 8001c60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f930 	bl	8001ec8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f917 	bl	8001eb4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00c      	beq.n	8001caa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00b      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f912 	bl	8001ef0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f8f9 	bl	8001edc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00b      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2210      	movs	r2, #16
 8001d04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8fc 	bl	8001f04 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2208      	movs	r2, #8
 8001d26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8f5 	bl	8001f18 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d07b      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d072      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d043      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03e      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001db0:	2b60      	cmp	r3, #96	; 0x60
 8001db2:	d02b      	beq.n	8001e0c <HAL_CAN_IRQHandler+0x32a>
 8001db4:	2b60      	cmp	r3, #96	; 0x60
 8001db6:	d82e      	bhi.n	8001e16 <HAL_CAN_IRQHandler+0x334>
 8001db8:	2b50      	cmp	r3, #80	; 0x50
 8001dba:	d022      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x320>
 8001dbc:	2b50      	cmp	r3, #80	; 0x50
 8001dbe:	d82a      	bhi.n	8001e16 <HAL_CAN_IRQHandler+0x334>
 8001dc0:	2b40      	cmp	r3, #64	; 0x40
 8001dc2:	d019      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x316>
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d826      	bhi.n	8001e16 <HAL_CAN_IRQHandler+0x334>
 8001dc8:	2b30      	cmp	r3, #48	; 0x30
 8001dca:	d010      	beq.n	8001dee <HAL_CAN_IRQHandler+0x30c>
 8001dcc:	2b30      	cmp	r3, #48	; 0x30
 8001dce:	d822      	bhi.n	8001e16 <HAL_CAN_IRQHandler+0x334>
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d002      	beq.n	8001dda <HAL_CAN_IRQHandler+0x2f8>
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d005      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001dd8:	e01d      	b.n	8001e16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001de2:	e019      	b.n	8001e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dec:	e014      	b.n	8001e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	f043 0320 	orr.w	r3, r3, #32
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001df6:	e00f      	b.n	8001e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e00:	e00a      	b.n	8001e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e0a:	e005      	b.n	8001e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e14:	e000      	b.n	8001e18 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f872 	bl	8001f2c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3728      	adds	r7, #40	; 0x28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 0307 	and.w	r3, r3, #7
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db0b      	blt.n	8001fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	4907      	ldr	r1, [pc, #28]	; (8001fdc <__NVIC_EnableIRQ+0x38>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000e100 	.word	0xe000e100

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	; (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
         );
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff8e 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff29 	bl	8001f40 <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff3e 	bl	8001f88 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff8e 	bl	8002034 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5d 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff31 	bl	8001fa4 <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa2 	bl	800209c <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e16b      	b.n	8002458 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 815a 	bne.w	8002452 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d017      	beq.n	8002254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d123      	bne.n	80022a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80b4 	beq.w	8002452 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b60      	ldr	r3, [pc, #384]	; (8002470 <HAL_GPIO_Init+0x30c>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a5f      	ldr	r2, [pc, #380]	; (8002470 <HAL_GPIO_Init+0x30c>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_GPIO_Init+0x30c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a5b      	ldr	r2, [pc, #364]	; (8002474 <HAL_GPIO_Init+0x310>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_GPIO_Init+0x314>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <HAL_GPIO_Init+0x226>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a51      	ldr	r2, [pc, #324]	; (800247c <HAL_GPIO_Init+0x318>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d025      	beq.n	8002386 <HAL_GPIO_Init+0x222>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a50      	ldr	r2, [pc, #320]	; (8002480 <HAL_GPIO_Init+0x31c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01f      	beq.n	8002382 <HAL_GPIO_Init+0x21e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4f      	ldr	r2, [pc, #316]	; (8002484 <HAL_GPIO_Init+0x320>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x21a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4e      	ldr	r2, [pc, #312]	; (8002488 <HAL_GPIO_Init+0x324>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x216>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4d      	ldr	r2, [pc, #308]	; (800248c <HAL_GPIO_Init+0x328>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x212>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <HAL_GPIO_Init+0x32c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x20e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4b      	ldr	r2, [pc, #300]	; (8002494 <HAL_GPIO_Init+0x330>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x20a>
 800236a:	2307      	movs	r3, #7
 800236c:	e00e      	b.n	800238c <HAL_GPIO_Init+0x228>
 800236e:	2308      	movs	r3, #8
 8002370:	e00c      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002372:	2306      	movs	r3, #6
 8002374:	e00a      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002376:	2305      	movs	r3, #5
 8002378:	e008      	b.n	800238c <HAL_GPIO_Init+0x228>
 800237a:	2304      	movs	r3, #4
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x228>
 800237e:	2303      	movs	r3, #3
 8002380:	e004      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002382:	2302      	movs	r3, #2
 8002384:	e002      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x228>
 800238a:	2300      	movs	r3, #0
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4093      	lsls	r3, r2
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800239c:	4935      	ldr	r1, [pc, #212]	; (8002474 <HAL_GPIO_Init+0x310>)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <HAL_GPIO_Init+0x334>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ce:	4a32      	ldr	r2, [pc, #200]	; (8002498 <HAL_GPIO_Init+0x334>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d4:	4b30      	ldr	r3, [pc, #192]	; (8002498 <HAL_GPIO_Init+0x334>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f8:	4a27      	ldr	r2, [pc, #156]	; (8002498 <HAL_GPIO_Init+0x334>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023fe:	4b26      	ldr	r3, [pc, #152]	; (8002498 <HAL_GPIO_Init+0x334>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <HAL_GPIO_Init+0x334>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_GPIO_Init+0x334>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800244c:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_GPIO_Init+0x334>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	f67f ae90 	bls.w	8002180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40013800 	.word	0x40013800
 8002478:	40020000 	.word	0x40020000
 800247c:	40020400 	.word	0x40020400
 8002480:	40020800 	.word	0x40020800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40021000 	.word	0x40021000
 800248c:	40021400 	.word	0x40021400
 8002490:	40021800 	.word	0x40021800
 8002494:	40021c00 	.word	0x40021c00
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e001      	b.n	80024be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
 80024d8:	4613      	mov	r3, r2
 80024da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024dc:	787b      	ldrb	r3, [r7, #1]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e8:	e003      	b.n	80024f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	041a      	lsls	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	619a      	str	r2, [r3, #24]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002510:	887a      	ldrh	r2, [r7, #2]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4013      	ands	r3, r2
 8002516:	041a      	lsls	r2, r3, #16
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43d9      	mvns	r1, r3
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	400b      	ands	r3, r1
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	619a      	str	r2, [r3, #24]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fb1e 	bl	8000b94 <HAL_GPIO_EXTI_Callback>
  }
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40013c00 	.word	0x40013c00

08002564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e267      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d075      	beq.n	800266e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002582:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b04      	cmp	r3, #4
 800258c:	d00c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258e:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002596:	2b08      	cmp	r3, #8
 8002598:	d112      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259a:	4b82      	ldr	r3, [pc, #520]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a6:	d10b      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	4b7e      	ldr	r3, [pc, #504]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d05b      	beq.n	800266c <HAL_RCC_OscConfig+0x108>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d157      	bne.n	800266c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e242      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x74>
 80025ca:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a75      	ldr	r2, [pc, #468]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e01d      	b.n	8002614 <HAL_RCC_OscConfig+0xb0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x98>
 80025e2:	4b70      	ldr	r3, [pc, #448]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6f      	ldr	r2, [pc, #444]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6c      	ldr	r2, [pc, #432]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0xb0>
 80025fc:	4b69      	ldr	r3, [pc, #420]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a68      	ldr	r2, [pc, #416]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b66      	ldr	r3, [pc, #408]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a65      	ldr	r2, [pc, #404]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 800260e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe ff10 	bl	8001440 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe ff0c 	bl	8001440 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e207      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	4b5b      	ldr	r3, [pc, #364]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0xc0>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fefc 	bl	8001440 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe fef8 	bl	8001440 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e1f3      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0xe8>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267a:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268e:	2b08      	cmp	r3, #8
 8002690:	d11c      	bne.n	80026cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d116      	bne.n	80026cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x152>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1c7      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4937      	ldr	r1, [pc, #220]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	e03a      	b.n	8002742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d4:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_RCC_OscConfig+0x244>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe feb1 	bl	8001440 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe fead 	bl	8001440 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1a8      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4925      	ldr	r1, [pc, #148]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_OscConfig+0x244>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fe90 	bl	8001440 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe fe8c 	bl	8001440 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e187      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d036      	beq.n	80027bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_RCC_OscConfig+0x248>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fe70 	bl	8001440 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe fe6c 	bl	8001440 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e167      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x200>
 8002782:	e01b      	b.n	80027bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_OscConfig+0x248>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7fe fe59 	bl	8001440 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	e00e      	b.n	80027b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002792:	f7fe fe55 	bl	8001440 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d907      	bls.n	80027b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e150      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
 80027a4:	40023800 	.word	0x40023800
 80027a8:	42470000 	.word	0x42470000
 80027ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b0:	4b88      	ldr	r3, [pc, #544]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ea      	bne.n	8002792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8097 	beq.w	80028f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ce:	4b81      	ldr	r3, [pc, #516]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b7d      	ldr	r3, [pc, #500]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a7c      	ldr	r2, [pc, #496]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b7a      	ldr	r3, [pc, #488]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fa:	4b77      	ldr	r3, [pc, #476]	; (80029d8 <HAL_RCC_OscConfig+0x474>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d118      	bne.n	8002838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002806:	4b74      	ldr	r3, [pc, #464]	; (80029d8 <HAL_RCC_OscConfig+0x474>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a73      	ldr	r2, [pc, #460]	; (80029d8 <HAL_RCC_OscConfig+0x474>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002812:	f7fe fe15 	bl	8001440 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7fe fe11 	bl	8001440 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e10c      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <HAL_RCC_OscConfig+0x474>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x2ea>
 8002840:	4b64      	ldr	r3, [pc, #400]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a63      	ldr	r2, [pc, #396]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x324>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x30c>
 8002856:	4b5f      	ldr	r3, [pc, #380]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a5e      	ldr	r2, [pc, #376]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	4a5b      	ldr	r2, [pc, #364]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6713      	str	r3, [r2, #112]	; 0x70
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0x324>
 8002870:	4b58      	ldr	r3, [pc, #352]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a57      	ldr	r2, [pc, #348]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002876:	f023 0301 	bic.w	r3, r3, #1
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
 800287c:	4b55      	ldr	r3, [pc, #340]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a54      	ldr	r2, [pc, #336]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002882:	f023 0304 	bic.w	r3, r3, #4
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7fe fdd6 	bl	8001440 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fe fdd2 	bl	8001440 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0cb      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ae:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0ee      	beq.n	8002898 <HAL_RCC_OscConfig+0x334>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028bc:	f7fe fdc0 	bl	8001440 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe fdbc 	bl	8001440 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0b5      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028da:	4b3e      	ldr	r3, [pc, #248]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ee      	bne.n	80028c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a1 	beq.w	8002a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002902:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b08      	cmp	r3, #8
 800290c:	d05c      	beq.n	80029c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d141      	bne.n	800299a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_RCC_OscConfig+0x478>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fd90 	bl	8001440 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002924:	f7fe fd8c 	bl	8001440 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e087      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	019b      	lsls	r3, r3, #6
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	085b      	lsrs	r3, r3, #1
 800295a:	3b01      	subs	r3, #1
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	491b      	ldr	r1, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x478>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7fe fd65 	bl	8001440 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297a:	f7fe fd61 	bl	8001440 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e05c      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x416>
 8002998:	e054      	b.n	8002a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_RCC_OscConfig+0x478>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fd4e 	bl	8001440 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe fd4a 	bl	8001440 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e045      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x444>
 80029c6:	e03d      	b.n	8002a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e038      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000
 80029dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_RCC_OscConfig+0x4ec>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d028      	beq.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d121      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d11a      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a10:	4013      	ands	r3, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d111      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800

08002a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0cc      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d90c      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a52      	ldr	r2, [pc, #328]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	494d      	ldr	r1, [pc, #308]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d044      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d119      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e067      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4934      	ldr	r1, [pc, #208]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b44:	f7fe fc7c 	bl	8001440 <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7fe fc78 	bl	8001440 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e04f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d20c      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e032      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4916      	ldr	r1, [pc, #88]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bda:	f000 f821 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490a      	ldr	r1, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fbdc 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023c00 	.word	0x40023c00
 8002c10:	40023800 	.word	0x40023800
 8002c14:	08003a38 	.word	0x08003a38
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c24:	b094      	sub	sp, #80	; 0x50
 8002c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c30:	2300      	movs	r3, #0
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c38:	4b79      	ldr	r3, [pc, #484]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d00d      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x40>
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	f200 80e1 	bhi.w	8002e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x34>
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c52:	e0db      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c58:	e0db      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c5e:	e0d8      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c60:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d063      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c76:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	099b      	lsrs	r3, r3, #6
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c88:	633b      	str	r3, [r7, #48]	; 0x30
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c92:	4622      	mov	r2, r4
 8002c94:	462b      	mov	r3, r5
 8002c96:	f04f 0000 	mov.w	r0, #0
 8002c9a:	f04f 0100 	mov.w	r1, #0
 8002c9e:	0159      	lsls	r1, r3, #5
 8002ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca4:	0150      	lsls	r0, r2, #5
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4621      	mov	r1, r4
 8002cac:	1a51      	subs	r1, r2, r1
 8002cae:	6139      	str	r1, [r7, #16]
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	018b      	lsls	r3, r1, #6
 8002cc8:	4651      	mov	r1, sl
 8002cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cce:	4651      	mov	r1, sl
 8002cd0:	018a      	lsls	r2, r1, #6
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8002cd8:	4659      	mov	r1, fp
 8002cda:	eb63 0901 	sbc.w	r9, r3, r1
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf2:	4690      	mov	r8, r2
 8002cf4:	4699      	mov	r9, r3
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	eb18 0303 	adds.w	r3, r8, r3
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	462b      	mov	r3, r5
 8002d00:	eb49 0303 	adc.w	r3, r9, r3
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d12:	4629      	mov	r1, r5
 8002d14:	024b      	lsls	r3, r1, #9
 8002d16:	4621      	mov	r1, r4
 8002d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	024a      	lsls	r2, r1, #9
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d26:	2200      	movs	r2, #0
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d30:	f7fd fd80 	bl	8000834 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4613      	mov	r3, r2
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d3c:	e058      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3e:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	099b      	lsrs	r3, r3, #6
 8002d44:	2200      	movs	r2, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	4611      	mov	r1, r2
 8002d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
 8002d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d58:	4642      	mov	r2, r8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	f04f 0000 	mov.w	r0, #0
 8002d60:	f04f 0100 	mov.w	r1, #0
 8002d64:	0159      	lsls	r1, r3, #5
 8002d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6a:	0150      	lsls	r0, r2, #5
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4641      	mov	r1, r8
 8002d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d76:	4649      	mov	r1, r9
 8002d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d90:	ebb2 040a 	subs.w	r4, r2, sl
 8002d94:	eb63 050b 	sbc.w	r5, r3, fp
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	00eb      	lsls	r3, r5, #3
 8002da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da6:	00e2      	lsls	r2, r4, #3
 8002da8:	4614      	mov	r4, r2
 8002daa:	461d      	mov	r5, r3
 8002dac:	4643      	mov	r3, r8
 8002dae:	18e3      	adds	r3, r4, r3
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	464b      	mov	r3, r9
 8002db4:	eb45 0303 	adc.w	r3, r5, r3
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	028b      	lsls	r3, r1, #10
 8002dca:	4621      	mov	r1, r4
 8002dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	028a      	lsls	r2, r1, #10
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	61fa      	str	r2, [r7, #28]
 8002de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de4:	f7fd fd26 	bl	8000834 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4613      	mov	r3, r2
 8002dee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e0a:	e002      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3750      	adds	r7, #80	; 0x50
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	00f42400 	.word	0x00f42400
 8002e28:	007a1200 	.word	0x007a1200

08002e2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e041      	b.n	8002ec2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe f9bc 	bl	80011d0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f000 fb2c 	bl	80034c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_IC_Start_IT+0x1e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	e013      	b.n	8002f12 <HAL_TIM_IC_Start_IT+0x46>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_IC_Start_IT+0x2e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	e00b      	b.n	8002f12 <HAL_TIM_IC_Start_IT+0x46>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_IC_Start_IT+0x3e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e003      	b.n	8002f12 <HAL_TIM_IC_Start_IT+0x46>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <HAL_TIM_IC_Start_IT+0x58>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e013      	b.n	8002f4c <HAL_TIM_IC_Start_IT+0x80>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d104      	bne.n	8002f34 <HAL_TIM_IC_Start_IT+0x68>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e00b      	b.n	8002f4c <HAL_TIM_IC_Start_IT+0x80>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d104      	bne.n	8002f44 <HAL_TIM_IC_Start_IT+0x78>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e003      	b.n	8002f4c <HAL_TIM_IC_Start_IT+0x80>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d102      	bne.n	8002f5a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f54:	7b7b      	ldrb	r3, [r7, #13]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0cc      	b.n	80030f8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <HAL_TIM_IC_Start_IT+0xa2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f6c:	e013      	b.n	8002f96 <HAL_TIM_IC_Start_IT+0xca>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_IC_Start_IT+0xb2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f7c:	e00b      	b.n	8002f96 <HAL_TIM_IC_Start_IT+0xca>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d104      	bne.n	8002f8e <HAL_TIM_IC_Start_IT+0xc2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f8c:	e003      	b.n	8002f96 <HAL_TIM_IC_Start_IT+0xca>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_IC_Start_IT+0xda>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa4:	e013      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x102>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_IC_Start_IT+0xea>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fb4:	e00b      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x102>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_IC_Start_IT+0xfa>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc4:	e003      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x102>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d841      	bhi.n	8003058 <HAL_TIM_IC_Start_IT+0x18c>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <HAL_TIM_IC_Start_IT+0x110>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003011 	.word	0x08003011
 8002fe0:	08003059 	.word	0x08003059
 8002fe4:	08003059 	.word	0x08003059
 8002fe8:	08003059 	.word	0x08003059
 8002fec:	08003023 	.word	0x08003023
 8002ff0:	08003059 	.word	0x08003059
 8002ff4:	08003059 	.word	0x08003059
 8002ff8:	08003059 	.word	0x08003059
 8002ffc:	08003035 	.word	0x08003035
 8003000:	08003059 	.word	0x08003059
 8003004:	08003059 	.word	0x08003059
 8003008:	08003059 	.word	0x08003059
 800300c:	08003047 	.word	0x08003047
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0202 	orr.w	r2, r2, #2
 800301e:	60da      	str	r2, [r3, #12]
      break;
 8003020:	e01d      	b.n	800305e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0204 	orr.w	r2, r2, #4
 8003030:	60da      	str	r2, [r3, #12]
      break;
 8003032:	e014      	b.n	800305e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0208 	orr.w	r2, r2, #8
 8003042:	60da      	str	r2, [r3, #12]
      break;
 8003044:	e00b      	b.n	800305e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0210 	orr.w	r2, r2, #16
 8003054:	60da      	str	r2, [r3, #12]
      break;
 8003056:	e002      	b.n	800305e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      break;
 800305c:	bf00      	nop
  }

  if (status == HAL_OK)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d148      	bne.n	80030f6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	6839      	ldr	r1, [r7, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fbf5 	bl	800385c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a22      	ldr	r2, [pc, #136]	; (8003100 <HAL_TIM_IC_Start_IT+0x234>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_TIM_IC_Start_IT+0x1f6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d01d      	beq.n	80030c2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1e      	ldr	r2, [pc, #120]	; (8003104 <HAL_TIM_IC_Start_IT+0x238>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d018      	beq.n	80030c2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <HAL_TIM_IC_Start_IT+0x23c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_TIM_IC_Start_IT+0x1f6>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1b      	ldr	r2, [pc, #108]	; (800310c <HAL_TIM_IC_Start_IT+0x240>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_TIM_IC_Start_IT+0x1f6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <HAL_TIM_IC_Start_IT+0x244>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_TIM_IC_Start_IT+0x1f6>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a18      	ldr	r2, [pc, #96]	; (8003114 <HAL_TIM_IC_Start_IT+0x248>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_TIM_IC_Start_IT+0x1f6>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a16      	ldr	r2, [pc, #88]	; (8003118 <HAL_TIM_IC_Start_IT+0x24c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d111      	bne.n	80030e6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b06      	cmp	r3, #6
 80030d2:	d010      	beq.n	80030f6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e4:	e007      	b.n	80030f6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40010000 	.word	0x40010000
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800
 800310c:	40000c00 	.word	0x40000c00
 8003110:	40010400 	.word	0x40010400
 8003114:	40014000 	.word	0x40014000
 8003118:	40001800 	.word	0x40001800

0800311c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d122      	bne.n	8003178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b02      	cmp	r3, #2
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0202 	mvn.w	r2, #2
 8003148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f994 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f986 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f997 	bl	80034a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b04      	cmp	r3, #4
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b04      	cmp	r3, #4
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0204 	mvn.w	r2, #4
 800319c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f96a 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f95c 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f96d 	bl	80034a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0208 	mvn.w	r2, #8
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2204      	movs	r2, #4
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f940 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f932 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f943 	bl	80034a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b10      	cmp	r3, #16
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b10      	cmp	r3, #16
 800323a:	d11b      	bne.n	8003274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0210 	mvn.w	r2, #16
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2208      	movs	r2, #8
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f916 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f908 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f919 	bl	80034a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10e      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0201 	mvn.w	r2, #1
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8e2 	bl	8003464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d10e      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b80      	cmp	r3, #128	; 0x80
 80032ba:	d107      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fb74 	bl	80039b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d10e      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d107      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8de 	bl	80034b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b20      	cmp	r3, #32
 8003304:	d10e      	bne.n	8003324 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b20      	cmp	r3, #32
 8003312:	d107      	bne.n	8003324 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0220 	mvn.w	r2, #32
 800331c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fb3e 	bl	80039a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003346:	2302      	movs	r3, #2
 8003348:	e088      	b.n	800345c <HAL_TIM_IC_ConfigChannel+0x130>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11b      	bne.n	8003390 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f000 f94e 	bl	8003608 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 020c 	bic.w	r2, r2, #12
 800337a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6999      	ldr	r1, [r3, #24]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	619a      	str	r2, [r3, #24]
 800338e:	e060      	b.n	8003452 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b04      	cmp	r3, #4
 8003394:	d11c      	bne.n	80033d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f000 f9a3 	bl	80036f0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6999      	ldr	r1, [r3, #24]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	021a      	lsls	r2, r3, #8
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	619a      	str	r2, [r3, #24]
 80033ce:	e040      	b.n	8003452 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d11b      	bne.n	800340e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f000 f9c0 	bl	800376a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 020c 	bic.w	r2, r2, #12
 80033f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69d9      	ldr	r1, [r3, #28]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	61da      	str	r2, [r3, #28]
 800340c:	e021      	b.n	8003452 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d11c      	bne.n	800344e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f000 f9dd 	bl	80037e2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003436:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69d9      	ldr	r1, [r3, #28]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	021a      	lsls	r2, r3, #8
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	61da      	str	r2, [r3, #28]
 800344c:	e001      	b.n	8003452 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800345a:	7dfb      	ldrb	r3, [r7, #23]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a40      	ldr	r2, [pc, #256]	; (80035dc <TIM_Base_SetConfig+0x114>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d00f      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3d      	ldr	r2, [pc, #244]	; (80035e0 <TIM_Base_SetConfig+0x118>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <TIM_Base_SetConfig+0x11c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3b      	ldr	r2, [pc, #236]	; (80035e8 <TIM_Base_SetConfig+0x120>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3a      	ldr	r2, [pc, #232]	; (80035ec <TIM_Base_SetConfig+0x124>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <TIM_Base_SetConfig+0x114>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d02b      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d027      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <TIM_Base_SetConfig+0x118>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d023      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2b      	ldr	r2, [pc, #172]	; (80035e4 <TIM_Base_SetConfig+0x11c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01f      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2a      	ldr	r2, [pc, #168]	; (80035e8 <TIM_Base_SetConfig+0x120>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01b      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a29      	ldr	r2, [pc, #164]	; (80035ec <TIM_Base_SetConfig+0x124>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d017      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a28      	ldr	r2, [pc, #160]	; (80035f0 <TIM_Base_SetConfig+0x128>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <TIM_Base_SetConfig+0x12c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00f      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <TIM_Base_SetConfig+0x130>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00b      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a25      	ldr	r2, [pc, #148]	; (80035fc <TIM_Base_SetConfig+0x134>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a24      	ldr	r2, [pc, #144]	; (8003600 <TIM_Base_SetConfig+0x138>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a23      	ldr	r2, [pc, #140]	; (8003604 <TIM_Base_SetConfig+0x13c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d108      	bne.n	800358c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <TIM_Base_SetConfig+0x114>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0xf8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <TIM_Base_SetConfig+0x124>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d103      	bne.n	80035c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	615a      	str	r2, [r3, #20]
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40000c00 	.word	0x40000c00
 80035ec:	40010400 	.word	0x40010400
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40014400 	.word	0x40014400
 80035f8:	40014800 	.word	0x40014800
 80035fc:	40001800 	.word	0x40001800
 8003600:	40001c00 	.word	0x40001c00
 8003604:	40002000 	.word	0x40002000

08003608 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0201 	bic.w	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a28      	ldr	r2, [pc, #160]	; (80036d4 <TIM_TI1_SetConfig+0xcc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01b      	beq.n	800366e <TIM_TI1_SetConfig+0x66>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363c:	d017      	beq.n	800366e <TIM_TI1_SetConfig+0x66>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a25      	ldr	r2, [pc, #148]	; (80036d8 <TIM_TI1_SetConfig+0xd0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <TIM_TI1_SetConfig+0x66>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a24      	ldr	r2, [pc, #144]	; (80036dc <TIM_TI1_SetConfig+0xd4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00f      	beq.n	800366e <TIM_TI1_SetConfig+0x66>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a23      	ldr	r2, [pc, #140]	; (80036e0 <TIM_TI1_SetConfig+0xd8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00b      	beq.n	800366e <TIM_TI1_SetConfig+0x66>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <TIM_TI1_SetConfig+0xdc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d007      	beq.n	800366e <TIM_TI1_SetConfig+0x66>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <TIM_TI1_SetConfig+0xe0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <TIM_TI1_SetConfig+0x66>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a20      	ldr	r2, [pc, #128]	; (80036ec <TIM_TI1_SetConfig+0xe4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <TIM_TI1_SetConfig+0x6a>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <TIM_TI1_SetConfig+0x6c>
 8003672:	2300      	movs	r3, #0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0303 	bic.w	r3, r3, #3
 800367e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e003      	b.n	8003692 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f023 030a 	bic.w	r3, r3, #10
 80036ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f003 030a 	and.w	r3, r3, #10
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40010400 	.word	0x40010400
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40001800 	.word	0x40001800

080036f0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0210 	bic.w	r2, r3, #16
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800372e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	031b      	lsls	r3, r3, #12
 8003734:	b29b      	uxth	r3, r3
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003742:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800376a:	b480      	push	{r7}
 800376c:	b087      	sub	sp, #28
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80037ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b087      	sub	sp, #28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003820:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	031b      	lsls	r3, r3, #12
 8003826:	b29b      	uxth	r3, r3
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003834:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	031b      	lsls	r3, r3, #12
 800383a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	2201      	movs	r2, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a1a      	ldr	r2, [r3, #32]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	43db      	mvns	r3, r3
 800387e:	401a      	ands	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038bc:	2302      	movs	r3, #2
 80038be:	e05a      	b.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a21      	ldr	r2, [pc, #132]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d022      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390c:	d01d      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d018      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1b      	ldr	r2, [pc, #108]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00e      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a18      	ldr	r2, [pc, #96]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a17      	ldr	r2, [pc, #92]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a15      	ldr	r2, [pc, #84]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10c      	bne.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	4313      	orrs	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40010000 	.word	0x40010000
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40010400 	.word	0x40010400
 8003998:	40014000 	.word	0x40014000
 800399c:	40001800 	.word	0x40001800

080039a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <memset>:
 80039c8:	4402      	add	r2, r0
 80039ca:	4603      	mov	r3, r0
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d100      	bne.n	80039d2 <memset+0xa>
 80039d0:	4770      	bx	lr
 80039d2:	f803 1b01 	strb.w	r1, [r3], #1
 80039d6:	e7f9      	b.n	80039cc <memset+0x4>

080039d8 <__libc_init_array>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	4d0d      	ldr	r5, [pc, #52]	; (8003a10 <__libc_init_array+0x38>)
 80039dc:	4c0d      	ldr	r4, [pc, #52]	; (8003a14 <__libc_init_array+0x3c>)
 80039de:	1b64      	subs	r4, r4, r5
 80039e0:	10a4      	asrs	r4, r4, #2
 80039e2:	2600      	movs	r6, #0
 80039e4:	42a6      	cmp	r6, r4
 80039e6:	d109      	bne.n	80039fc <__libc_init_array+0x24>
 80039e8:	4d0b      	ldr	r5, [pc, #44]	; (8003a18 <__libc_init_array+0x40>)
 80039ea:	4c0c      	ldr	r4, [pc, #48]	; (8003a1c <__libc_init_array+0x44>)
 80039ec:	f000 f818 	bl	8003a20 <_init>
 80039f0:	1b64      	subs	r4, r4, r5
 80039f2:	10a4      	asrs	r4, r4, #2
 80039f4:	2600      	movs	r6, #0
 80039f6:	42a6      	cmp	r6, r4
 80039f8:	d105      	bne.n	8003a06 <__libc_init_array+0x2e>
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a00:	4798      	blx	r3
 8003a02:	3601      	adds	r6, #1
 8003a04:	e7ee      	b.n	80039e4 <__libc_init_array+0xc>
 8003a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0a:	4798      	blx	r3
 8003a0c:	3601      	adds	r6, #1
 8003a0e:	e7f2      	b.n	80039f6 <__libc_init_array+0x1e>
 8003a10:	08003a50 	.word	0x08003a50
 8003a14:	08003a50 	.word	0x08003a50
 8003a18:	08003a50 	.word	0x08003a50
 8003a1c:	08003a54 	.word	0x08003a54

08003a20 <_init>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	bf00      	nop
 8003a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a26:	bc08      	pop	{r3}
 8003a28:	469e      	mov	lr, r3
 8003a2a:	4770      	bx	lr

08003a2c <_fini>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	bf00      	nop
 8003a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a32:	bc08      	pop	{r3}
 8003a34:	469e      	mov	lr, r3
 8003a36:	4770      	bx	lr
