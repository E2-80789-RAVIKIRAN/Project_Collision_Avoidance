
rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec4  08003ec4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ecc  08003ecc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000dc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b24  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190d  00000000  00000000  00029bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0002b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000808  00000000  00000000  0002bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d17  00000000  00000000  0002c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a81d  00000000  00000000  0004d2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c57c0  00000000  00000000  00057acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d28c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027c0  00000000  00000000  0011d2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e4c 	.word	0x08003e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003e4c 	.word	0x08003e4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	f023 030f 	bic.w	r3, r3, #15
 800059a:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	723b      	strb	r3, [r7, #8]
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	727b      	strb	r3, [r7, #9]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	f043 030c 	orr.w	r3, r3, #12
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	72bb      	strb	r3, [r7, #10]
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <lcd16x2_i2c_sendCommand+0x60>)
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <lcd16x2_i2c_sendCommand+0x64>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b299      	uxth	r1, r3
 80005ce:	f107 0208 	add.w	r2, r7, #8
 80005d2:	23c8      	movs	r3, #200	; 0xc8
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2304      	movs	r3, #4
 80005d8:	f001 febe 	bl	8002358 <HAL_I2C_Master_Transmit>
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	20000090 	.word	0x20000090

080005ec <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f023 030f 	bic.w	r3, r3, #15
 8000602:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	f043 030d 	orr.w	r3, r3, #13
 800060a:	b2db      	uxtb	r3, r3
 800060c:	723b      	strb	r3, [r7, #8]
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	f043 0309 	orr.w	r3, r3, #9
 8000614:	b2db      	uxtb	r3, r3
 8000616:	727b      	strb	r3, [r7, #9]
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	f043 030d 	orr.w	r3, r3, #13
 800061e:	b2db      	uxtb	r3, r3
 8000620:	72bb      	strb	r3, [r7, #10]
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	f043 0309 	orr.w	r3, r3, #9
 8000628:	b2db      	uxtb	r3, r3
 800062a:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <lcd16x2_i2c_sendData+0x60>)
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <lcd16x2_i2c_sendData+0x64>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b299      	uxth	r1, r3
 8000636:	f107 0208 	add.w	r2, r7, #8
 800063a:	23c8      	movs	r3, #200	; 0xc8
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2304      	movs	r3, #4
 8000640:	f001 fe8a 	bl	8002358 <HAL_I2C_Master_Transmit>
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000008c 	.word	0x2000008c
 8000650:	20000090 	.word	0x20000090

08000654 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 800065c:	2032      	movs	r0, #50	; 0x32
 800065e:	f000 fc9f 	bl	8000fa0 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000662:	4a30      	ldr	r2, [pc, #192]	; (8000724 <lcd16x2_i2c_init+0xd0>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <lcd16x2_i2c_init+0xd0>)
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000670:	2205      	movs	r2, #5
 8000672:	214e      	movs	r1, #78	; 0x4e
 8000674:	f001 ff6e 	bl	8002554 <HAL_I2C_IsDeviceReady>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d010      	beq.n	80006a0 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <lcd16x2_i2c_init+0xd0>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000686:	2205      	movs	r2, #5
 8000688:	217e      	movs	r1, #126	; 0x7e
 800068a:	f001 ff63 	bl	8002554 <HAL_I2C_IsDeviceReady>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000694:	2300      	movs	r3, #0
 8000696:	e040      	b.n	800071a <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <lcd16x2_i2c_init+0xd4>)
 800069a:	227e      	movs	r2, #126	; 0x7e
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e002      	b.n	80006a6 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <lcd16x2_i2c_init+0xd4>)
 80006a2:	224e      	movs	r2, #78	; 0x4e
 80006a4:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 80006a6:	202d      	movs	r0, #45	; 0x2d
 80006a8:	f000 fc7a 	bl	8000fa0 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 80006ac:	2030      	movs	r0, #48	; 0x30
 80006ae:	f7ff ff69 	bl	8000584 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 80006b2:	2005      	movs	r0, #5
 80006b4:	f000 fc74 	bl	8000fa0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006b8:	2030      	movs	r0, #48	; 0x30
 80006ba:	f7ff ff63 	bl	8000584 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 fc6e 	bl	8000fa0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006c4:	2030      	movs	r0, #48	; 0x30
 80006c6:	f7ff ff5d 	bl	8000584 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006ca:	2008      	movs	r0, #8
 80006cc:	f000 fc68 	bl	8000fa0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 80006d0:	2020      	movs	r0, #32
 80006d2:	f7ff ff57 	bl	8000584 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006d6:	2008      	movs	r0, #8
 80006d8:	f000 fc62 	bl	8000fa0 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80006dc:	2028      	movs	r0, #40	; 0x28
 80006de:	f7ff ff51 	bl	8000584 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 fc5c 	bl	8000fa0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80006e8:	2008      	movs	r0, #8
 80006ea:	f7ff ff4b 	bl	8000584 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f000 fc56 	bl	8000fa0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff ff45 	bl	8000584 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80006fa:	2003      	movs	r0, #3
 80006fc:	f000 fc50 	bl	8000fa0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8000700:	2006      	movs	r0, #6
 8000702:	f7ff ff3f 	bl	8000584 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fc4a 	bl	8000fa0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 800070c:	200c      	movs	r0, #12
 800070e:	f7ff ff39 	bl	8000584 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000712:	2003      	movs	r0, #3
 8000714:	f000 fc44 	bl	8000fa0 <HAL_Delay>

  return true;
 8000718:	2301      	movs	r3, #1
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000008c 	.word	0x2000008c
 8000728:	20000090 	.word	0x20000090

0800072c <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	460a      	mov	r2, r1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d108      	bne.n	800075c <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000750:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff15 	bl	8000584 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 800075a:	e007      	b.n	800076c <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000762:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff0c 	bl	8000584 <lcd16x2_i2c_sendCommand>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff ff03 	bl	8000584 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800077e:	2003      	movs	r0, #3
 8000780:	f000 fc0e 	bl	8000fa0 <HAL_Delay>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000788:	b40f      	push	{r0, r1, r2, r3}
 800078a:	b590      	push	{r4, r7, lr}
 800078c:	b089      	sub	sp, #36	; 0x24
 800078e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000794:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fefc 	bl	800359c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	77fb      	strb	r3, [r7, #31]
 80007a8:	e00a      	b.n	80007c0 <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80007aa:	7ffb      	ldrb	r3, [r7, #31]
 80007ac:	3320      	adds	r3, #32
 80007ae:	443b      	add	r3, r7
 80007b0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff19 	bl	80005ec <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80007ba:	7ffb      	ldrb	r3, [r7, #31]
 80007bc:	3301      	adds	r3, #1
 80007be:	77fb      	strb	r3, [r7, #31]
 80007c0:	7ffc      	ldrb	r4, [r7, #31]
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fd02 	bl	80001d0 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	429c      	cmp	r4, r3
 80007d0:	d202      	bcs.n	80007d8 <lcd16x2_i2c_printf+0x50>
 80007d2:	7ffb      	ldrb	r3, [r7, #31]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d9e8      	bls.n	80007aa <lcd16x2_i2c_printf+0x22>
  }
}
 80007d8:	bf00      	nop
 80007da:	3724      	adds	r7, #36	; 0x24
 80007dc:	46bd      	mov	sp, r7
 80007de:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007e2:	b004      	add	sp, #16
 80007e4:	4770      	bx	lr
	...

080007e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef RxHeader;
uint16_t RxData[1];
uint32_t RxMailBox;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

	flag=1;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // blue
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80007fe:	f001 fc29 	bl	8002054 <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000806:	2100      	movs	r1, #0
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800080a:	f000 fe0d 	bl	8001428 <HAL_CAN_GetRxMessage>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000110 	.word	0x20000110
 800081c:	40020c00 	.word	0x40020c00
 8000820:	20000130 	.word	0x20000130
 8000824:	20000114 	.word	0x20000114
 8000828:	20000094 	.word	0x20000094

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fb43 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f869 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f953 	bl	8000ae4 <MX_GPIO_Init>
  MX_CAN1_Init();
 800083e:	f000 f8cf 	bl	80009e0 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000842:	f000 f921 	bl	8000a88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(lcd16x2_i2c_init(&hi2c1))
 8000846:	4829      	ldr	r0, [pc, #164]	; (80008ec <main+0xc0>)
 8000848:	f7ff ff04 	bl	8000654 <lcd16x2_i2c_init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d005      	beq.n	800085e <main+0x32>
      {
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000858:	4825      	ldr	r0, [pc, #148]	; (80008f0 <main+0xc4>)
 800085a:	f001 fbfb 	bl	8002054 <HAL_GPIO_WritePin>
      }
  HAL_CAN_Start(&hcan1);
 800085e:	4825      	ldr	r0, [pc, #148]	; (80008f4 <main+0xc8>)
 8000860:	f000 fd9e 	bl	80013a0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000864:	2102      	movs	r1, #2
 8000866:	4823      	ldr	r0, [pc, #140]	; (80008f4 <main+0xc8>)
 8000868:	f000 fef0 	bl	800164c <HAL_CAN_ActivateNotification>

  RxHeader.DLC = 2;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <main+0xcc>)
 800086e:	2202      	movs	r2, #2
 8000870:	611a      	str	r2, [r3, #16]
  RxHeader.RTR = CAN_RTR_DATA;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <main+0xcc>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  RxHeader.IDE = CAN_ID_STD;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <main+0xcc>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  RxHeader.ExtId = 0x00;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <main+0xcc>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  RxHeader.StdId = 0x0AA;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <main+0xcc>)
 8000886:	22aa      	movs	r2, #170	; 0xaa
 8000888:	601a      	str	r2, [r3, #0]

  HAL_Delay(100);
 800088a:	2064      	movs	r0, #100	; 0x64
 800088c:	f000 fb88 	bl	8000fa0 <HAL_Delay>
  HAL_Delay(100);
 8000890:	2064      	movs	r0, #100	; 0x64
 8000892:	f000 fb85 	bl	8000fa0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  		//if(RxData[0] == 'S'){
	  	  	  if(flag==1)
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <main+0xd0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d1fb      	bne.n	8000896 <main+0x6a>
	  	  	  {
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a4:	4812      	ldr	r0, [pc, #72]	; (80008f0 <main+0xc4>)
 80008a6:	f001 fbd5 	bl	8002054 <HAL_GPIO_WritePin>
	  			lcd16x2_i2c_setCursor(0, 0);
 80008aa:	2100      	movs	r1, #0
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff ff3d 	bl	800072c <lcd16x2_i2c_setCursor>
	  			sprintf(msg, "Received");
 80008b2:	463b      	mov	r3, r7
 80008b4:	4912      	ldr	r1, [pc, #72]	; (8000900 <main+0xd4>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fe3a 	bl	8003530 <siprintf>
	  			lcd16x2_i2c_setCursor(0, 0);
 80008bc:	2100      	movs	r1, #0
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ff34 	bl	800072c <lcd16x2_i2c_setCursor>
	  			sprintf(msg, "ADC=%d",RxData[0]);
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <main+0xd8>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	463b      	mov	r3, r7
 80008cc:	490e      	ldr	r1, [pc, #56]	; (8000908 <main+0xdc>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fe2e 	bl	8003530 <siprintf>
	  			lcd16x2_i2c_printf(msg);
 80008d4:	463b      	mov	r3, r7
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ff56 	bl	8000788 <lcd16x2_i2c_printf>
	  			HAL_Delay(1000);
 80008dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e0:	f000 fb5e 	bl	8000fa0 <HAL_Delay>
	  			lcd16x2_i2c_clear();
 80008e4:	f7ff ff46 	bl	8000774 <lcd16x2_i2c_clear>
	  	  	  if(flag==1)
 80008e8:	e7d5      	b.n	8000896 <main+0x6a>
 80008ea:	bf00      	nop
 80008ec:	200000bc 	.word	0x200000bc
 80008f0:	40020c00 	.word	0x40020c00
 80008f4:	20000094 	.word	0x20000094
 80008f8:	20000114 	.word	0x20000114
 80008fc:	20000110 	.word	0x20000110
 8000900:	08003e64 	.word	0x08003e64
 8000904:	20000130 	.word	0x20000130
 8000908:	08003e70 	.word	0x08003e70

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b094      	sub	sp, #80	; 0x50
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	2230      	movs	r2, #48	; 0x30
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fe00 	bl	8003520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <SystemClock_Config+0xcc>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <SystemClock_Config+0xcc>)
 800093a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093e:	6413      	str	r3, [r2, #64]	; 0x40
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <SystemClock_Config+0xcc>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <SystemClock_Config+0xd0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a21      	ldr	r2, [pc, #132]	; (80009dc <SystemClock_Config+0xd0>)
 8000956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <SystemClock_Config+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000980:	2348      	movs	r3, #72	; 0x48
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000984:	2302      	movs	r3, #2
 8000986:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000988:	2307      	movs	r3, #7
 800098a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	4618      	mov	r0, r3
 8000992:	f002 f917 	bl	8002bc4 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800099c:	f000 f91a 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	230f      	movs	r3, #15
 80009a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a4:	2302      	movs	r3, #2
 80009a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2102      	movs	r1, #2
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fb78 	bl	80030b4 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ca:	f000 f903 	bl	8000bd4 <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3750      	adds	r7, #80	; 0x50
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_CAN1_Init+0xa0>)
 80009e8:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <MX_CAN1_Init+0xa4>)
 80009ea:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_CAN1_Init+0xa0>)
 80009ee:	2212      	movs	r2, #18
 80009f0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <MX_CAN1_Init+0xa0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_CAN1_Init+0xa0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <MX_CAN1_Init+0xa0>)
 8000a00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a04:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_CAN1_Init+0xa0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_CAN1_Init+0xa0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_CAN1_Init+0xa0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_CAN1_Init+0xa0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_CAN1_Init+0xa0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_CAN1_Init+0xa0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_CAN1_Init+0xa0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_CAN1_Init+0xa0>)
 8000a32:	f000 fad9 	bl	8000fe8 <HAL_CAN_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a3c:	f000 f8ca 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  canFilterConfig.SlaveStartFilterBank=14;
 8000a44:	230e      	movs	r3, #14
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  canFilterConfig.FilterBank=2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterMaskIdLow=0x0000;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMaskIdHigh=0xFF00;
 8000a5c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000a60:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterIdLow=0x0000;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterIdHigh=0x1500;
 8000a66:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000a6a:	603b      	str	r3, [r7, #0]
  HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_CAN1_Init+0xa0>)
 8000a72:	f000 fbb5 	bl	80011e0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000094 	.word	0x20000094
 8000a84:	40006400 	.word	0x40006400

08000a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <MX_I2C1_Init+0x54>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_I2C1_Init+0x58>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac6:	f001 fb03 	bl	80020d0 <HAL_I2C_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 f880 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000bc 	.word	0x200000bc
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	000186a0 	.word	0x000186a0

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a31      	ldr	r2, [pc, #196]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a2a      	ldr	r2, [pc, #168]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a23      	ldr	r2, [pc, #140]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b70:	4816      	ldr	r0, [pc, #88]	; (8000bcc <MX_GPIO_Init+0xe8>)
 8000b72:	f001 fa6f 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b8c:	f001 f8c6 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b90:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4808      	ldr	r0, [pc, #32]	; (8000bcc <MX_GPIO_Init+0xe8>)
 8000baa:	f001 f8b7 	bl	8001d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2006      	movs	r0, #6
 8000bb4:	f001 f87b 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bb8:	2006      	movs	r0, #6
 8000bba:	f001 f894 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c1e:	2007      	movs	r0, #7
 8000c20:	f001 f83a 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <HAL_CAN_MspInit+0x94>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d134      	bne.n	8000cbc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_CAN_MspInit+0x98>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <HAL_CAN_MspInit+0x98>)
 8000c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_CAN_MspInit+0x98>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_CAN_MspInit+0x98>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_CAN_MspInit+0x98>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_CAN_MspInit+0x98>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c9c:	2309      	movs	r3, #9
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <HAL_CAN_MspInit+0x9c>)
 8000ca8:	f001 f838 	bl	8001d1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2014      	movs	r0, #20
 8000cb2:	f000 fffc 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cb6:	2014      	movs	r0, #20
 8000cb8:	f001 f815 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40006400 	.word	0x40006400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020400 	.word	0x40020400

08000cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_I2C_MspInit+0x84>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12b      	bne.n	8000d4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0e:	23c0      	movs	r3, #192	; 0xc0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d12:	2312      	movs	r3, #18
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <HAL_I2C_MspInit+0x8c>)
 8000d2a:	f000 fff7 	bl	8001d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40005400 	.word	0x40005400
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020400 	.word	0x40020400

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f8d8 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f001 f965 	bl	8002088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <CAN1_RX0_IRQHandler+0x10>)
 8000dca:	f000 fc65 	bl	8001698 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000094 	.word	0x20000094

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f002 fb60 	bl	80034cc <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20020000 	.word	0x20020000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	20000134 	.word	0x20000134
 8000e40:	20000150 	.word	0x20000150

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6e:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e84:	4c0b      	ldr	r4, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e92:	f7ff ffd7 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e96:	f002 fb1f 	bl	80034d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fcc7 	bl	800082c <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eac:	08003ed4 	.word	0x08003ed4
  ldr r2, =_sbss
 8000eb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000eb4:	2000014c 	.word	0x2000014c

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_Init+0x40>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_Init+0x40>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_Init+0x40>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 fed7 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fe76 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 feef 	bl	8001d02 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f3c:	f000 feb7 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000138 	.word	0x20000138

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000138 	.word	0x20000138

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e0ed      	b.n	80011d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fe12 	bl	8000c30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0201 	orr.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800101c:	f7ff ffb4 	bl	8000f88 <HAL_GetTick>
 8001020:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001022:	e012      	b.n	800104a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001024:	f7ff ffb0 	bl	8000f88 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d90b      	bls.n	800104a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2205      	movs	r2, #5
 8001042:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0c5      	b.n	80011d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0e5      	beq.n	8001024 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0202 	bic.w	r2, r2, #2
 8001066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff ff8e 	bl	8000f88 <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800106e:	e012      	b.n	8001096 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001070:	f7ff ff8a 	bl	8000f88 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b0a      	cmp	r3, #10
 800107c:	d90b      	bls.n	8001096 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2205      	movs	r2, #5
 800108e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e09f      	b.n	80011d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e5      	bne.n	8001070 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7e1b      	ldrb	r3, [r3, #24]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d108      	bne.n	80010be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	e007      	b.n	80010ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7e5b      	ldrb	r3, [r3, #25]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d108      	bne.n	80010e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e007      	b.n	80010f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7e9b      	ldrb	r3, [r3, #26]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d108      	bne.n	8001112 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0220 	orr.w	r2, r2, #32
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e007      	b.n	8001122 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0220 	bic.w	r2, r2, #32
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7edb      	ldrb	r3, [r3, #27]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d108      	bne.n	800113c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0210 	bic.w	r2, r2, #16
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e007      	b.n	800114c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0210 	orr.w	r2, r2, #16
 800114a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7f1b      	ldrb	r3, [r3, #28]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d108      	bne.n	8001166 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0208 	orr.w	r2, r2, #8
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0208 	bic.w	r2, r2, #8
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7f5b      	ldrb	r3, [r3, #29]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0204 	orr.w	r2, r2, #4
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0204 	bic.w	r2, r2, #4
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	ea42 0103 	orr.w	r1, r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011f8:	7cfb      	ldrb	r3, [r7, #19]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d003      	beq.n	8001206 <HAL_CAN_ConfigFilter+0x26>
 80011fe:	7cfb      	ldrb	r3, [r7, #19]
 8001200:	2b02      	cmp	r3, #2
 8001202:	f040 80be 	bne.w	8001382 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <HAL_CAN_ConfigFilter+0x1bc>)
 8001208:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001220:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	431a      	orrs	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	2201      	movs	r2, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	401a      	ands	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d123      	bne.n	80012b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800128a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3248      	adds	r2, #72	; 0x48
 8001290:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a6:	6979      	ldr	r1, [r7, #20]
 80012a8:	3348      	adds	r3, #72	; 0x48
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d122      	bne.n	80012fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3248      	adds	r2, #72	; 0x48
 80012de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f4:	6979      	ldr	r1, [r7, #20]
 80012f6:	3348      	adds	r3, #72	; 0x48
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	401a      	ands	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001318:	e007      	b.n	800132a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	431a      	orrs	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d109      	bne.n	8001346 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	401a      	ands	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001344:	e007      	b.n	8001356 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	431a      	orrs	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d107      	bne.n	800136e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	431a      	orrs	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001374:	f023 0201 	bic.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e006      	b.n	8001390 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
  }
}
 8001390:	4618      	mov	r0, r3
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40006400 	.word	0x40006400

080013a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d12e      	bne.n	8001412 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fddc 	bl	8000f88 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013d2:	e012      	b.n	80013fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013d4:	f7ff fdd8 	bl	8000f88 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b0a      	cmp	r3, #10
 80013e0:	d90b      	bls.n	80013fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2205      	movs	r2, #5
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e012      	b.n	8001420 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e5      	bne.n	80013d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e006      	b.n	8001420 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d003      	beq.n	800144c <HAL_CAN_GetRxMessage+0x24>
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	2b02      	cmp	r3, #2
 8001448:	f040 80f3 	bne.w	8001632 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10e      	bne.n	8001470 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d116      	bne.n	800148e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0e7      	b.n	8001640 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0d8      	b.n	8001640 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	331b      	adds	r3, #27
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4413      	add	r3, r2
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0204 	and.w	r2, r3, #4
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10c      	bne.n	80014c6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	331b      	adds	r3, #27
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0d5b      	lsrs	r3, r3, #21
 80014bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e00b      	b.n	80014de <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	331b      	adds	r3, #27
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	331b      	adds	r3, #27
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4413      	add	r3, r2
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0202 	and.w	r2, r3, #2
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	331b      	adds	r3, #27
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	3304      	adds	r3, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 020f 	and.w	r2, r3, #15
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	331b      	adds	r3, #27
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	4413      	add	r3, r2
 8001518:	3304      	adds	r3, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	b2da      	uxtb	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	331b      	adds	r3, #27
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4413      	add	r3, r2
 8001530:	3304      	adds	r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0a1a      	lsrs	r2, r3, #8
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4413      	add	r3, r2
 8001576:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0c1a      	lsrs	r2, r3, #16
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3302      	adds	r3, #2
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0e1a      	lsrs	r2, r3, #24
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3303      	adds	r3, #3
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3304      	adds	r3, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0a1a      	lsrs	r2, r3, #8
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	3305      	adds	r3, #5
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	4413      	add	r3, r2
 80015dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	0c1a      	lsrs	r2, r3, #16
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	3306      	adds	r3, #6
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0e1a      	lsrs	r2, r3, #24
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3307      	adds	r3, #7
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0220 	orr.w	r2, r2, #32
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	e007      	b.n	800162e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e006      	b.n	8001640 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
  }
}
 8001640:	4618      	mov	r0, r3
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d002      	beq.n	800166a <HAL_CAN_ActivateNotification+0x1e>
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d109      	bne.n	800167e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6959      	ldr	r1, [r3, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e006      	b.n	800168c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d07c      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d023      	beq.n	8001730 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f983 	bl	8001a06 <HAL_CAN_TxMailbox0CompleteCallback>
 8001700:	e016      	b.n	8001730 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	e00c      	b.n	8001730 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
 8001728:	e002      	b.n	8001730 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f989 	bl	8001a42 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d024      	beq.n	8001784 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001742:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f963 	bl	8001a1a <HAL_CAN_TxMailbox1CompleteCallback>
 8001754:	e016      	b.n	8001784 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
 8001768:	e00c      	b.n	8001784 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
 800177c:	e002      	b.n	8001784 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f969 	bl	8001a56 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d024      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001796:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f943 	bl	8001a2e <HAL_CAN_TxMailbox2CompleteCallback>
 80017a8:	e016      	b.n	80017d8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	e00c      	b.n	80017d8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
 80017d0:	e002      	b.n	80017d8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f949 	bl	8001a6a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00c      	beq.n	80017fc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d007      	beq.n	80017fc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2210      	movs	r2, #16
 80017fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2208      	movs	r2, #8
 8001816:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f930 	bl	8001a7e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7fe ffd6 	bl	80007e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00c      	beq.n	8001860 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001856:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2210      	movs	r2, #16
 800185e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2208      	movs	r2, #8
 800187a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f912 	bl	8001aa6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	d009      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8f9 	bl	8001a92 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2210      	movs	r2, #16
 80018ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f8fc 	bl	8001aba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00b      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2208      	movs	r2, #8
 80018dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f8f5 	bl	8001ace <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d07b      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d072      	beq.n	80019de <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	2b00      	cmp	r3, #0
 8001938:	d008      	beq.n	800194c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001952:	2b00      	cmp	r3, #0
 8001954:	d043      	beq.n	80019de <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	d03e      	beq.n	80019de <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001966:	2b60      	cmp	r3, #96	; 0x60
 8001968:	d02b      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x32a>
 800196a:	2b60      	cmp	r3, #96	; 0x60
 800196c:	d82e      	bhi.n	80019cc <HAL_CAN_IRQHandler+0x334>
 800196e:	2b50      	cmp	r3, #80	; 0x50
 8001970:	d022      	beq.n	80019b8 <HAL_CAN_IRQHandler+0x320>
 8001972:	2b50      	cmp	r3, #80	; 0x50
 8001974:	d82a      	bhi.n	80019cc <HAL_CAN_IRQHandler+0x334>
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	d019      	beq.n	80019ae <HAL_CAN_IRQHandler+0x316>
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d826      	bhi.n	80019cc <HAL_CAN_IRQHandler+0x334>
 800197e:	2b30      	cmp	r3, #48	; 0x30
 8001980:	d010      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x30c>
 8001982:	2b30      	cmp	r3, #48	; 0x30
 8001984:	d822      	bhi.n	80019cc <HAL_CAN_IRQHandler+0x334>
 8001986:	2b10      	cmp	r3, #16
 8001988:	d002      	beq.n	8001990 <HAL_CAN_IRQHandler+0x2f8>
 800198a:	2b20      	cmp	r3, #32
 800198c:	d005      	beq.n	800199a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800198e:	e01d      	b.n	80019cc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001998:	e019      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019a2:	e014      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	f043 0320 	orr.w	r3, r3, #32
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019ac:	e00f      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019b6:	e00a      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019c0:	e005      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019ca:	e000      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            break;
 80019cc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699a      	ldr	r2, [r3, #24]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019dc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2204      	movs	r2, #4
 80019e4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f872 	bl	8001ae2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff3e 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff31 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e16b      	b.n	8002010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 815a 	bne.w	800200a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80b4 	beq.w	800200a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b60      	ldr	r3, [pc, #384]	; (8002028 <HAL_GPIO_Init+0x30c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a5f      	ldr	r2, [pc, #380]	; (8002028 <HAL_GPIO_Init+0x30c>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_GPIO_Init+0x30c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ebe:	4a5b      	ldr	r2, [pc, #364]	; (800202c <HAL_GPIO_Init+0x310>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_GPIO_Init+0x314>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a51      	ldr	r2, [pc, #324]	; (8002034 <HAL_GPIO_Init+0x318>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d025      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_GPIO_Init+0x31c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01f      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_GPIO_Init+0x320>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d019      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x216>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4d      	ldr	r2, [pc, #308]	; (8002044 <HAL_GPIO_Init+0x328>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x212>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4c      	ldr	r2, [pc, #304]	; (8002048 <HAL_GPIO_Init+0x32c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x20e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4b      	ldr	r2, [pc, #300]	; (800204c <HAL_GPIO_Init+0x330>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x20a>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e00e      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f26:	2308      	movs	r3, #8
 8001f28:	e00c      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	e00a      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f42:	2300      	movs	r3, #0
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f002 0203 	and.w	r2, r2, #3
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f54:	4935      	ldr	r1, [pc, #212]	; (800202c <HAL_GPIO_Init+0x310>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a32      	ldr	r2, [pc, #200]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fda:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_GPIO_Init+0x334>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	f67f ae90 	bls.w	8001d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40013800 	.word	0x40013800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40021000 	.word	0x40021000
 8002044:	40021400 	.word	0x40021400
 8002048:	40021800 	.word	0x40021800
 800204c:	40021c00 	.word	0x40021c00
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002070:	e003      	b.n	800207a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f806 	bl	80020b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40013c00 	.word	0x40013c00

080020b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e12b      	b.n	800233a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe fdea 	bl	8000cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2224      	movs	r2, #36	; 0x24
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002134:	f001 f9b6 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8002138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a81      	ldr	r2, [pc, #516]	; (8002344 <HAL_I2C_Init+0x274>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d807      	bhi.n	8002154 <HAL_I2C_Init+0x84>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a80      	ldr	r2, [pc, #512]	; (8002348 <HAL_I2C_Init+0x278>)
 8002148:	4293      	cmp	r3, r2
 800214a:	bf94      	ite	ls
 800214c:	2301      	movls	r3, #1
 800214e:	2300      	movhi	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e006      	b.n	8002162 <HAL_I2C_Init+0x92>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a7d      	ldr	r2, [pc, #500]	; (800234c <HAL_I2C_Init+0x27c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	bf94      	ite	ls
 800215c:	2301      	movls	r3, #1
 800215e:	2300      	movhi	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0e7      	b.n	800233a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4a78      	ldr	r2, [pc, #480]	; (8002350 <HAL_I2C_Init+0x280>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0c9b      	lsrs	r3, r3, #18
 8002174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a6a      	ldr	r2, [pc, #424]	; (8002344 <HAL_I2C_Init+0x274>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d802      	bhi.n	80021a4 <HAL_I2C_Init+0xd4>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3301      	adds	r3, #1
 80021a2:	e009      	b.n	80021b8 <HAL_I2C_Init+0xe8>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	4a69      	ldr	r2, [pc, #420]	; (8002354 <HAL_I2C_Init+0x284>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	3301      	adds	r3, #1
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	430b      	orrs	r3, r1
 80021be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	495c      	ldr	r1, [pc, #368]	; (8002344 <HAL_I2C_Init+0x274>)
 80021d4:	428b      	cmp	r3, r1
 80021d6:	d819      	bhi.n	800220c <HAL_I2C_Init+0x13c>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1e59      	subs	r1, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e6:	1c59      	adds	r1, r3, #1
 80021e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021ec:	400b      	ands	r3, r1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_I2C_Init+0x138>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1e59      	subs	r1, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002200:	3301      	adds	r3, #1
 8002202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002206:	e051      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 8002208:	2304      	movs	r3, #4
 800220a:	e04f      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d111      	bne.n	8002238 <HAL_I2C_Init+0x168>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e58      	subs	r0, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	440b      	add	r3, r1
 8002222:	fbb0 f3f3 	udiv	r3, r0, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e012      	b.n	800225e <HAL_I2C_Init+0x18e>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1e58      	subs	r0, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	0099      	lsls	r1, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	fbb0 f3f3 	udiv	r3, r0, r3
 800224e:	3301      	adds	r3, #1
 8002250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Init+0x196>
 8002262:	2301      	movs	r3, #1
 8002264:	e022      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10e      	bne.n	800228c <HAL_I2C_Init+0x1bc>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1e58      	subs	r0, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	440b      	add	r3, r1
 800227c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002280:	3301      	adds	r3, #1
 8002282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228a:	e00f      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e58      	subs	r0, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	0099      	lsls	r1, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	6809      	ldr	r1, [r1, #0]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6911      	ldr	r1, [r2, #16]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68d2      	ldr	r2, [r2, #12]
 80022e6:	4311      	orrs	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	000186a0 	.word	0x000186a0
 8002348:	001e847f 	.word	0x001e847f
 800234c:	003d08ff 	.word	0x003d08ff
 8002350:	431bde83 	.word	0x431bde83
 8002354:	10624dd3 	.word	0x10624dd3

08002358 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	461a      	mov	r2, r3
 8002364:	460b      	mov	r3, r1
 8002366:	817b      	strh	r3, [r7, #10]
 8002368:	4613      	mov	r3, r2
 800236a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7fe fe0c 	bl	8000f88 <HAL_GetTick>
 8002370:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b20      	cmp	r3, #32
 800237c:	f040 80e0 	bne.w	8002540 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2319      	movs	r3, #25
 8002386:	2201      	movs	r2, #1
 8002388:	4970      	ldr	r1, [pc, #448]	; (800254c <HAL_I2C_Master_Transmit+0x1f4>)
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fa92 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002396:	2302      	movs	r3, #2
 8002398:	e0d3      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_I2C_Master_Transmit+0x50>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e0cc      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d007      	beq.n	80023ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2221      	movs	r2, #33	; 0x21
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2210      	movs	r2, #16
 80023ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	893a      	ldrh	r2, [r7, #8]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a50      	ldr	r2, [pc, #320]	; (8002550 <HAL_I2C_Master_Transmit+0x1f8>)
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002410:	8979      	ldrh	r1, [r7, #10]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f9ca 	bl	80027b0 <I2C_MasterRequestWrite>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e08d      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800243c:	e066      	b.n	800250c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	6a39      	ldr	r1, [r7, #32]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fb0c 	bl	8002a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00d      	beq.n	800246a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b04      	cmp	r3, #4
 8002454:	d107      	bne.n	8002466 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e06b      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	781a      	ldrb	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d11b      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0x188>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d017      	beq.n	80024e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	6a39      	ldr	r1, [r7, #32]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fafc 	bl	8002ae2 <I2C_WaitOnBTFFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d107      	bne.n	8002508 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002506:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e01a      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d194      	bne.n	800243e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	00100002 	.word	0x00100002
 8002550:	ffff0000 	.word	0xffff0000

08002554 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	460b      	mov	r3, r1
 8002562:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7fe fd10 	bl	8000f88 <HAL_GetTick>
 8002568:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b20      	cmp	r3, #32
 8002578:	f040 8111 	bne.w	800279e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	2319      	movs	r3, #25
 8002582:	2201      	movs	r2, #1
 8002584:	4988      	ldr	r1, [pc, #544]	; (80027a8 <HAL_I2C_IsDeviceReady+0x254>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f994 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002592:	2302      	movs	r3, #2
 8002594:	e104      	b.n	80027a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_I2C_IsDeviceReady+0x50>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e0fd      	b.n	80027a0 <HAL_I2C_IsDeviceReady+0x24c>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d007      	beq.n	80025ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0201 	orr.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2224      	movs	r2, #36	; 0x24
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a70      	ldr	r2, [pc, #448]	; (80027ac <HAL_I2C_IsDeviceReady+0x258>)
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f952 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002624:	d103      	bne.n	800262e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0b6      	b.n	80027a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002632:	897b      	ldrh	r3, [r7, #10]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002640:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002642:	f7fe fca1 	bl	8000f88 <HAL_GetTick>
 8002646:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b02      	cmp	r3, #2
 8002654:	bf0c      	ite	eq
 8002656:	2301      	moveq	r3, #1
 8002658:	2300      	movne	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002676:	e025      	b.n	80026c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002678:	f7fe fc86 	bl	8000f88 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d302      	bcc.n	800268e <HAL_I2C_IsDeviceReady+0x13a>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d103      	bne.n	8002696 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	22a0      	movs	r2, #160	; 0xa0
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2ba0      	cmp	r3, #160	; 0xa0
 80026ce:	d005      	beq.n	80026dc <HAL_I2C_IsDeviceReady+0x188>
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <HAL_I2C_IsDeviceReady+0x188>
 80026d6:	7dbb      	ldrb	r3, [r7, #22]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0cd      	beq.n	8002678 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d129      	bne.n	8002746 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002700:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2319      	movs	r3, #25
 800271e:	2201      	movs	r2, #1
 8002720:	4921      	ldr	r1, [pc, #132]	; (80027a8 <HAL_I2C_IsDeviceReady+0x254>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f8c6 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e036      	b.n	80027a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e02c      	b.n	80027a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002754:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800275e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	490f      	ldr	r1, [pc, #60]	; (80027a8 <HAL_I2C_IsDeviceReady+0x254>)
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f8a2 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e012      	b.n	80027a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	3301      	adds	r3, #1
 800277e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	429a      	cmp	r2, r3
 8002786:	f4ff af32 	bcc.w	80025ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
  }
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	00100002 	.word	0x00100002
 80027ac:	ffff0000 	.word	0xffff0000

080027b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	460b      	mov	r3, r1
 80027be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d006      	beq.n	80027da <I2C_MasterRequestWrite+0x2a>
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d003      	beq.n	80027da <I2C_MasterRequestWrite+0x2a>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d8:	d108      	bne.n	80027ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e00b      	b.n	8002804 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	2b12      	cmp	r3, #18
 80027f2:	d107      	bne.n	8002804 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002802:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f84f 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282a:	d103      	bne.n	8002834 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e035      	b.n	80028a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002840:	d108      	bne.n	8002854 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002842:	897b      	ldrh	r3, [r7, #10]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	e01b      	b.n	800288c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002854:	897b      	ldrh	r3, [r7, #10]
 8002856:	11db      	asrs	r3, r3, #7
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f003 0306 	and.w	r3, r3, #6
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f063 030f 	orn	r3, r3, #15
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <I2C_MasterRequestWrite+0xfc>)
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f875 	bl	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e010      	b.n	80028a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4907      	ldr	r1, [pc, #28]	; (80028b0 <I2C_MasterRequestWrite+0x100>)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f865 	bl	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	00010008 	.word	0x00010008
 80028b0:	00010002 	.word	0x00010002

080028b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c4:	e025      	b.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028cc:	d021      	beq.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ce:	f7fe fb5b 	bl	8000f88 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e023      	b.n	800295a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10d      	bne.n	8002938 <I2C_WaitOnFlagUntilTimeout+0x84>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	e00c      	b.n	8002952 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4013      	ands	r3, r2
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	429a      	cmp	r2, r3
 8002956:	d0b6      	beq.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002970:	e051      	b.n	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002980:	d123      	bne.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002990:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800299a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e046      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029d0:	d021      	beq.n	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	f7fe fad9 	bl	8000f88 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d302      	bcc.n	80029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d116      	bne.n	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f043 0220 	orr.w	r2, r3, #32
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e020      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d10c      	bne.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf14      	ite	ne
 8002a32:	2301      	movne	r3, #1
 8002a34:	2300      	moveq	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	e00b      	b.n	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	43da      	mvns	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4013      	ands	r3, r2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf14      	ite	ne
 8002a4c:	2301      	movne	r3, #1
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d18d      	bne.n	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a6c:	e02d      	b.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f878 	bl	8002b64 <I2C_IsAcknowledgeFailed>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02d      	b.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a84:	d021      	beq.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7fe fa7f 	bl	8000f88 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d116      	bne.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f043 0220 	orr.w	r2, r3, #32
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e007      	b.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d1ca      	bne.n	8002a6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aee:	e02d      	b.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f837 	bl	8002b64 <I2C_IsAcknowledgeFailed>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e02d      	b.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b06:	d021      	beq.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7fe fa3e 	bl	8000f88 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f043 0220 	orr.w	r2, r3, #32
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e007      	b.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d1ca      	bne.n	8002af0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d11b      	bne.n	8002bb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0204 	orr.w	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e267      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d075      	beq.n	8002cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be2:	4b88      	ldr	r3, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d00c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bee:	4b85      	ldr	r3, [pc, #532]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d112      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4b82      	ldr	r3, [pc, #520]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c06:	d10b      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	4b7e      	ldr	r3, [pc, #504]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d05b      	beq.n	8002ccc <HAL_RCC_OscConfig+0x108>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d157      	bne.n	8002ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e242      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d106      	bne.n	8002c38 <HAL_RCC_OscConfig+0x74>
 8002c2a:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a75      	ldr	r2, [pc, #468]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xb0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x98>
 8002c42:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6f      	ldr	r2, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a6c      	ldr	r2, [pc, #432]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xb0>
 8002c5c:	4b69      	ldr	r3, [pc, #420]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a68      	ldr	r2, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b66      	ldr	r3, [pc, #408]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe f984 	bl	8000f88 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe f980 	bl	8000f88 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e207      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xc0>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe f970 	bl	8000f88 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe f96c 	bl	8000f88 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1f3      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	4b51      	ldr	r3, [pc, #324]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0xe8>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d063      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cda:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d11c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b44      	ldr	r3, [pc, #272]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d116      	bne.n	8002d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x152>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e1c7      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4937      	ldr	r1, [pc, #220]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	e03a      	b.n	8002da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d34:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_RCC_OscConfig+0x244>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe f925 	bl	8000f88 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d42:	f7fe f921 	bl	8000f88 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e1a8      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d60:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4925      	ldr	r1, [pc, #148]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
 8002d74:	e015      	b.n	8002da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCC_OscConfig+0x244>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f904 	bl	8000f88 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d84:	f7fe f900 	bl	8000f88 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e187      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d036      	beq.n	8002e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d016      	beq.n	8002de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_RCC_OscConfig+0x248>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe f8e4 	bl	8000f88 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe f8e0 	bl	8000f88 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e167      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x200>
 8002de2:	e01b      	b.n	8002e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_OscConfig+0x248>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7fe f8cd 	bl	8000f88 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df0:	e00e      	b.n	8002e10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe f8c9 	bl	8000f88 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d907      	bls.n	8002e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e150      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002e04:	40023800 	.word	0x40023800
 8002e08:	42470000 	.word	0x42470000
 8002e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ea      	bne.n	8002df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8097 	beq.w	8002f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b81      	ldr	r3, [pc, #516]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	4b7d      	ldr	r3, [pc, #500]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a7c      	ldr	r2, [pc, #496]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b7a      	ldr	r3, [pc, #488]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b77      	ldr	r3, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x474>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e66:	4b74      	ldr	r3, [pc, #464]	; (8003038 <HAL_RCC_OscConfig+0x474>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a73      	ldr	r2, [pc, #460]	; (8003038 <HAL_RCC_OscConfig+0x474>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7fe f889 	bl	8000f88 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7fe f885 	bl	8000f88 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e10c      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <HAL_RCC_OscConfig+0x474>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x2ea>
 8002ea0:	4b64      	ldr	r3, [pc, #400]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a63      	ldr	r2, [pc, #396]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	e01c      	b.n	8002ee8 <HAL_RCC_OscConfig+0x324>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x30c>
 8002eb6:	4b5f      	ldr	r3, [pc, #380]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a5e      	ldr	r2, [pc, #376]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a5b      	ldr	r2, [pc, #364]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ece:	e00b      	b.n	8002ee8 <HAL_RCC_OscConfig+0x324>
 8002ed0:	4b58      	ldr	r3, [pc, #352]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	4a57      	ldr	r2, [pc, #348]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70
 8002edc:	4b55      	ldr	r3, [pc, #340]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a54      	ldr	r2, [pc, #336]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	f023 0304 	bic.w	r3, r3, #4
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe f84a 	bl	8000f88 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fe f846 	bl	8000f88 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e0cb      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0e:	4b49      	ldr	r3, [pc, #292]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0ee      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x334>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1c:	f7fe f834 	bl	8000f88 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fe f830 	bl	8000f88 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e0b5      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3a:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1ee      	bne.n	8002f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4c:	4b39      	ldr	r3, [pc, #228]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	4a38      	ldr	r2, [pc, #224]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80a1 	beq.w	80030a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f62:	4b34      	ldr	r3, [pc, #208]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d05c      	beq.n	8003028 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d141      	bne.n	8002ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f76:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCC_OscConfig+0x478>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fe f804 	bl	8000f88 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe f800 	bl	8000f88 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e087      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	019b      	lsls	r3, r3, #6
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	041b      	lsls	r3, r3, #16
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	491b      	ldr	r1, [pc, #108]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_RCC_OscConfig+0x478>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7fd ffd9 	bl	8000f88 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fda:	f7fd ffd5 	bl	8000f88 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e05c      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x416>
 8002ff8:	e054      	b.n	80030a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCC_OscConfig+0x478>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fd ffc2 	bl	8000f88 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003008:	f7fd ffbe 	bl	8000f88 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e045      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x444>
 8003026:	e03d      	b.n	80030a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e038      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8003034:	40023800 	.word	0x40023800
 8003038:	40007000 	.word	0x40007000
 800303c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x4ec>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d028      	beq.n	80030a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d121      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d11a      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003070:	4013      	ands	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003078:	4293      	cmp	r3, r2
 800307a:	d111      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800

080030b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0cc      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d90c      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b8      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800312a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	494d      	ldr	r1, [pc, #308]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d044      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d119      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d003      	beq.n	8003172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316e:	2b03      	cmp	r3, #3
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e06f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e067      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003192:	4b37      	ldr	r3, [pc, #220]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 0203 	bic.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4934      	ldr	r1, [pc, #208]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a4:	f7fd fef0 	bl	8000f88 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ac:	f7fd feec 	bl	8000f88 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e04f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 020c 	and.w	r2, r3, #12
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d1eb      	bne.n	80031ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d20c      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e032      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800323a:	f000 f821 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd fe50 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40023c00 	.word	0x40023c00
 8003270:	40023800 	.word	0x40023800
 8003274:	08003e78 	.word	0x08003e78
 8003278:	20000000 	.word	0x20000000
 800327c:	20000004 	.word	0x20000004

08003280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003284:	b094      	sub	sp, #80	; 0x50
 8003286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	647b      	str	r3, [r7, #68]	; 0x44
 800328c:	2300      	movs	r3, #0
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003290:	2300      	movs	r3, #0
 8003292:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003298:	4b79      	ldr	r3, [pc, #484]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d00d      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x40>
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	f200 80e1 	bhi.w	800346c <HAL_RCC_GetSysClockFreq+0x1ec>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d003      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x3a>
 80032b2:	e0db      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_GetSysClockFreq+0x204>)
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032b8:	e0db      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ba:	4b73      	ldr	r3, [pc, #460]	; (8003488 <HAL_RCC_GetSysClockFreq+0x208>)
 80032bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032be:	e0d8      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c0:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ca:	4b6d      	ldr	r3, [pc, #436]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d063      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d6:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	099b      	lsrs	r3, r3, #6
 80032dc:	2200      	movs	r2, #0
 80032de:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ea:	2300      	movs	r3, #0
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
 80032ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032f2:	4622      	mov	r2, r4
 80032f4:	462b      	mov	r3, r5
 80032f6:	f04f 0000 	mov.w	r0, #0
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	0159      	lsls	r1, r3, #5
 8003300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003304:	0150      	lsls	r0, r2, #5
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4621      	mov	r1, r4
 800330c:	1a51      	subs	r1, r2, r1
 800330e:	6139      	str	r1, [r7, #16]
 8003310:	4629      	mov	r1, r5
 8003312:	eb63 0301 	sbc.w	r3, r3, r1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003324:	4659      	mov	r1, fp
 8003326:	018b      	lsls	r3, r1, #6
 8003328:	4651      	mov	r1, sl
 800332a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800332e:	4651      	mov	r1, sl
 8003330:	018a      	lsls	r2, r1, #6
 8003332:	4651      	mov	r1, sl
 8003334:	ebb2 0801 	subs.w	r8, r2, r1
 8003338:	4659      	mov	r1, fp
 800333a:	eb63 0901 	sbc.w	r9, r3, r1
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800334e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003352:	4690      	mov	r8, r2
 8003354:	4699      	mov	r9, r3
 8003356:	4623      	mov	r3, r4
 8003358:	eb18 0303 	adds.w	r3, r8, r3
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	462b      	mov	r3, r5
 8003360:	eb49 0303 	adc.w	r3, r9, r3
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003372:	4629      	mov	r1, r5
 8003374:	024b      	lsls	r3, r1, #9
 8003376:	4621      	mov	r1, r4
 8003378:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800337c:	4621      	mov	r1, r4
 800337e:	024a      	lsls	r2, r1, #9
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003386:	2200      	movs	r2, #0
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
 800338a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800338c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003390:	f7fc ff76 	bl	8000280 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4613      	mov	r3, r2
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800339c:	e058      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339e:	4b38      	ldr	r3, [pc, #224]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	2200      	movs	r2, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	4611      	mov	r1, r2
 80033aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ae:	623b      	str	r3, [r7, #32]
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033b8:	4642      	mov	r2, r8
 80033ba:	464b      	mov	r3, r9
 80033bc:	f04f 0000 	mov.w	r0, #0
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	0159      	lsls	r1, r3, #5
 80033c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ca:	0150      	lsls	r0, r2, #5
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4641      	mov	r1, r8
 80033d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033d6:	4649      	mov	r1, r9
 80033d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033f0:	ebb2 040a 	subs.w	r4, r2, sl
 80033f4:	eb63 050b 	sbc.w	r5, r3, fp
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	00eb      	lsls	r3, r5, #3
 8003402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003406:	00e2      	lsls	r2, r4, #3
 8003408:	4614      	mov	r4, r2
 800340a:	461d      	mov	r5, r3
 800340c:	4643      	mov	r3, r8
 800340e:	18e3      	adds	r3, r4, r3
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	464b      	mov	r3, r9
 8003414:	eb45 0303 	adc.w	r3, r5, r3
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003426:	4629      	mov	r1, r5
 8003428:	028b      	lsls	r3, r1, #10
 800342a:	4621      	mov	r1, r4
 800342c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003430:	4621      	mov	r1, r4
 8003432:	028a      	lsls	r2, r1, #10
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343a:	2200      	movs	r2, #0
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	61fa      	str	r2, [r7, #28]
 8003440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003444:	f7fc ff1c 	bl	8000280 <__aeabi_uldivmod>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4613      	mov	r3, r2
 800344e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	3301      	adds	r3, #1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800346a:	e002      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetSysClockFreq+0x204>)
 800346e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003474:	4618      	mov	r0, r3
 8003476:	3750      	adds	r7, #80	; 0x50
 8003478:	46bd      	mov	sp, r7
 800347a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	00f42400 	.word	0x00f42400
 8003488:	007a1200 	.word	0x007a1200

0800348c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000000 	.word	0x20000000

080034a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034a8:	f7ff fff0 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	0a9b      	lsrs	r3, r3, #10
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	4903      	ldr	r1, [pc, #12]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ba:	5ccb      	ldrb	r3, [r1, r3]
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40023800 	.word	0x40023800
 80034c8:	08003e88 	.word	0x08003e88

080034cc <__errno>:
 80034cc:	4b01      	ldr	r3, [pc, #4]	; (80034d4 <__errno+0x8>)
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	2000000c 	.word	0x2000000c

080034d8 <__libc_init_array>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4d0d      	ldr	r5, [pc, #52]	; (8003510 <__libc_init_array+0x38>)
 80034dc:	4c0d      	ldr	r4, [pc, #52]	; (8003514 <__libc_init_array+0x3c>)
 80034de:	1b64      	subs	r4, r4, r5
 80034e0:	10a4      	asrs	r4, r4, #2
 80034e2:	2600      	movs	r6, #0
 80034e4:	42a6      	cmp	r6, r4
 80034e6:	d109      	bne.n	80034fc <__libc_init_array+0x24>
 80034e8:	4d0b      	ldr	r5, [pc, #44]	; (8003518 <__libc_init_array+0x40>)
 80034ea:	4c0c      	ldr	r4, [pc, #48]	; (800351c <__libc_init_array+0x44>)
 80034ec:	f000 fcae 	bl	8003e4c <_init>
 80034f0:	1b64      	subs	r4, r4, r5
 80034f2:	10a4      	asrs	r4, r4, #2
 80034f4:	2600      	movs	r6, #0
 80034f6:	42a6      	cmp	r6, r4
 80034f8:	d105      	bne.n	8003506 <__libc_init_array+0x2e>
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003500:	4798      	blx	r3
 8003502:	3601      	adds	r6, #1
 8003504:	e7ee      	b.n	80034e4 <__libc_init_array+0xc>
 8003506:	f855 3b04 	ldr.w	r3, [r5], #4
 800350a:	4798      	blx	r3
 800350c:	3601      	adds	r6, #1
 800350e:	e7f2      	b.n	80034f6 <__libc_init_array+0x1e>
 8003510:	08003ecc 	.word	0x08003ecc
 8003514:	08003ecc 	.word	0x08003ecc
 8003518:	08003ecc 	.word	0x08003ecc
 800351c:	08003ed0 	.word	0x08003ed0

08003520 <memset>:
 8003520:	4402      	add	r2, r0
 8003522:	4603      	mov	r3, r0
 8003524:	4293      	cmp	r3, r2
 8003526:	d100      	bne.n	800352a <memset+0xa>
 8003528:	4770      	bx	lr
 800352a:	f803 1b01 	strb.w	r1, [r3], #1
 800352e:	e7f9      	b.n	8003524 <memset+0x4>

08003530 <siprintf>:
 8003530:	b40e      	push	{r1, r2, r3}
 8003532:	b500      	push	{lr}
 8003534:	b09c      	sub	sp, #112	; 0x70
 8003536:	ab1d      	add	r3, sp, #116	; 0x74
 8003538:	9002      	str	r0, [sp, #8]
 800353a:	9006      	str	r0, [sp, #24]
 800353c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003540:	4809      	ldr	r0, [pc, #36]	; (8003568 <siprintf+0x38>)
 8003542:	9107      	str	r1, [sp, #28]
 8003544:	9104      	str	r1, [sp, #16]
 8003546:	4909      	ldr	r1, [pc, #36]	; (800356c <siprintf+0x3c>)
 8003548:	f853 2b04 	ldr.w	r2, [r3], #4
 800354c:	9105      	str	r1, [sp, #20]
 800354e:	6800      	ldr	r0, [r0, #0]
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	a902      	add	r1, sp, #8
 8003554:	f000 f888 	bl	8003668 <_svfiprintf_r>
 8003558:	9b02      	ldr	r3, [sp, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	b01c      	add	sp, #112	; 0x70
 8003560:	f85d eb04 	ldr.w	lr, [sp], #4
 8003564:	b003      	add	sp, #12
 8003566:	4770      	bx	lr
 8003568:	2000000c 	.word	0x2000000c
 800356c:	ffff0208 	.word	0xffff0208

08003570 <_vsiprintf_r>:
 8003570:	b500      	push	{lr}
 8003572:	b09b      	sub	sp, #108	; 0x6c
 8003574:	9100      	str	r1, [sp, #0]
 8003576:	9104      	str	r1, [sp, #16]
 8003578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800357c:	9105      	str	r1, [sp, #20]
 800357e:	9102      	str	r1, [sp, #8]
 8003580:	4905      	ldr	r1, [pc, #20]	; (8003598 <_vsiprintf_r+0x28>)
 8003582:	9103      	str	r1, [sp, #12]
 8003584:	4669      	mov	r1, sp
 8003586:	f000 f86f 	bl	8003668 <_svfiprintf_r>
 800358a:	9b00      	ldr	r3, [sp, #0]
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	b01b      	add	sp, #108	; 0x6c
 8003592:	f85d fb04 	ldr.w	pc, [sp], #4
 8003596:	bf00      	nop
 8003598:	ffff0208 	.word	0xffff0208

0800359c <vsiprintf>:
 800359c:	4613      	mov	r3, r2
 800359e:	460a      	mov	r2, r1
 80035a0:	4601      	mov	r1, r0
 80035a2:	4802      	ldr	r0, [pc, #8]	; (80035ac <vsiprintf+0x10>)
 80035a4:	6800      	ldr	r0, [r0, #0]
 80035a6:	f7ff bfe3 	b.w	8003570 <_vsiprintf_r>
 80035aa:	bf00      	nop
 80035ac:	2000000c 	.word	0x2000000c

080035b0 <__ssputs_r>:
 80035b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035b4:	688e      	ldr	r6, [r1, #8]
 80035b6:	429e      	cmp	r6, r3
 80035b8:	4682      	mov	sl, r0
 80035ba:	460c      	mov	r4, r1
 80035bc:	4690      	mov	r8, r2
 80035be:	461f      	mov	r7, r3
 80035c0:	d838      	bhi.n	8003634 <__ssputs_r+0x84>
 80035c2:	898a      	ldrh	r2, [r1, #12]
 80035c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035c8:	d032      	beq.n	8003630 <__ssputs_r+0x80>
 80035ca:	6825      	ldr	r5, [r4, #0]
 80035cc:	6909      	ldr	r1, [r1, #16]
 80035ce:	eba5 0901 	sub.w	r9, r5, r1
 80035d2:	6965      	ldr	r5, [r4, #20]
 80035d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035dc:	3301      	adds	r3, #1
 80035de:	444b      	add	r3, r9
 80035e0:	106d      	asrs	r5, r5, #1
 80035e2:	429d      	cmp	r5, r3
 80035e4:	bf38      	it	cc
 80035e6:	461d      	movcc	r5, r3
 80035e8:	0553      	lsls	r3, r2, #21
 80035ea:	d531      	bpl.n	8003650 <__ssputs_r+0xa0>
 80035ec:	4629      	mov	r1, r5
 80035ee:	f000 fb63 	bl	8003cb8 <_malloc_r>
 80035f2:	4606      	mov	r6, r0
 80035f4:	b950      	cbnz	r0, 800360c <__ssputs_r+0x5c>
 80035f6:	230c      	movs	r3, #12
 80035f8:	f8ca 3000 	str.w	r3, [sl]
 80035fc:	89a3      	ldrh	r3, [r4, #12]
 80035fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003602:	81a3      	strh	r3, [r4, #12]
 8003604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360c:	6921      	ldr	r1, [r4, #16]
 800360e:	464a      	mov	r2, r9
 8003610:	f000 fabe 	bl	8003b90 <memcpy>
 8003614:	89a3      	ldrh	r3, [r4, #12]
 8003616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800361a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361e:	81a3      	strh	r3, [r4, #12]
 8003620:	6126      	str	r6, [r4, #16]
 8003622:	6165      	str	r5, [r4, #20]
 8003624:	444e      	add	r6, r9
 8003626:	eba5 0509 	sub.w	r5, r5, r9
 800362a:	6026      	str	r6, [r4, #0]
 800362c:	60a5      	str	r5, [r4, #8]
 800362e:	463e      	mov	r6, r7
 8003630:	42be      	cmp	r6, r7
 8003632:	d900      	bls.n	8003636 <__ssputs_r+0x86>
 8003634:	463e      	mov	r6, r7
 8003636:	6820      	ldr	r0, [r4, #0]
 8003638:	4632      	mov	r2, r6
 800363a:	4641      	mov	r1, r8
 800363c:	f000 fab6 	bl	8003bac <memmove>
 8003640:	68a3      	ldr	r3, [r4, #8]
 8003642:	1b9b      	subs	r3, r3, r6
 8003644:	60a3      	str	r3, [r4, #8]
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	4433      	add	r3, r6
 800364a:	6023      	str	r3, [r4, #0]
 800364c:	2000      	movs	r0, #0
 800364e:	e7db      	b.n	8003608 <__ssputs_r+0x58>
 8003650:	462a      	mov	r2, r5
 8003652:	f000 fba5 	bl	8003da0 <_realloc_r>
 8003656:	4606      	mov	r6, r0
 8003658:	2800      	cmp	r0, #0
 800365a:	d1e1      	bne.n	8003620 <__ssputs_r+0x70>
 800365c:	6921      	ldr	r1, [r4, #16]
 800365e:	4650      	mov	r0, sl
 8003660:	f000 fabe 	bl	8003be0 <_free_r>
 8003664:	e7c7      	b.n	80035f6 <__ssputs_r+0x46>
	...

08003668 <_svfiprintf_r>:
 8003668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366c:	4698      	mov	r8, r3
 800366e:	898b      	ldrh	r3, [r1, #12]
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	b09d      	sub	sp, #116	; 0x74
 8003674:	4607      	mov	r7, r0
 8003676:	460d      	mov	r5, r1
 8003678:	4614      	mov	r4, r2
 800367a:	d50e      	bpl.n	800369a <_svfiprintf_r+0x32>
 800367c:	690b      	ldr	r3, [r1, #16]
 800367e:	b963      	cbnz	r3, 800369a <_svfiprintf_r+0x32>
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	f000 fb19 	bl	8003cb8 <_malloc_r>
 8003686:	6028      	str	r0, [r5, #0]
 8003688:	6128      	str	r0, [r5, #16]
 800368a:	b920      	cbnz	r0, 8003696 <_svfiprintf_r+0x2e>
 800368c:	230c      	movs	r3, #12
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003694:	e0d1      	b.n	800383a <_svfiprintf_r+0x1d2>
 8003696:	2340      	movs	r3, #64	; 0x40
 8003698:	616b      	str	r3, [r5, #20]
 800369a:	2300      	movs	r3, #0
 800369c:	9309      	str	r3, [sp, #36]	; 0x24
 800369e:	2320      	movs	r3, #32
 80036a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80036a8:	2330      	movs	r3, #48	; 0x30
 80036aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003854 <_svfiprintf_r+0x1ec>
 80036ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036b2:	f04f 0901 	mov.w	r9, #1
 80036b6:	4623      	mov	r3, r4
 80036b8:	469a      	mov	sl, r3
 80036ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036be:	b10a      	cbz	r2, 80036c4 <_svfiprintf_r+0x5c>
 80036c0:	2a25      	cmp	r2, #37	; 0x25
 80036c2:	d1f9      	bne.n	80036b8 <_svfiprintf_r+0x50>
 80036c4:	ebba 0b04 	subs.w	fp, sl, r4
 80036c8:	d00b      	beq.n	80036e2 <_svfiprintf_r+0x7a>
 80036ca:	465b      	mov	r3, fp
 80036cc:	4622      	mov	r2, r4
 80036ce:	4629      	mov	r1, r5
 80036d0:	4638      	mov	r0, r7
 80036d2:	f7ff ff6d 	bl	80035b0 <__ssputs_r>
 80036d6:	3001      	adds	r0, #1
 80036d8:	f000 80aa 	beq.w	8003830 <_svfiprintf_r+0x1c8>
 80036dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036de:	445a      	add	r2, fp
 80036e0:	9209      	str	r2, [sp, #36]	; 0x24
 80036e2:	f89a 3000 	ldrb.w	r3, [sl]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80a2 	beq.w	8003830 <_svfiprintf_r+0x1c8>
 80036ec:	2300      	movs	r3, #0
 80036ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036f6:	f10a 0a01 	add.w	sl, sl, #1
 80036fa:	9304      	str	r3, [sp, #16]
 80036fc:	9307      	str	r3, [sp, #28]
 80036fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003702:	931a      	str	r3, [sp, #104]	; 0x68
 8003704:	4654      	mov	r4, sl
 8003706:	2205      	movs	r2, #5
 8003708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370c:	4851      	ldr	r0, [pc, #324]	; (8003854 <_svfiprintf_r+0x1ec>)
 800370e:	f7fc fd67 	bl	80001e0 <memchr>
 8003712:	9a04      	ldr	r2, [sp, #16]
 8003714:	b9d8      	cbnz	r0, 800374e <_svfiprintf_r+0xe6>
 8003716:	06d0      	lsls	r0, r2, #27
 8003718:	bf44      	itt	mi
 800371a:	2320      	movmi	r3, #32
 800371c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003720:	0711      	lsls	r1, r2, #28
 8003722:	bf44      	itt	mi
 8003724:	232b      	movmi	r3, #43	; 0x2b
 8003726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800372a:	f89a 3000 	ldrb.w	r3, [sl]
 800372e:	2b2a      	cmp	r3, #42	; 0x2a
 8003730:	d015      	beq.n	800375e <_svfiprintf_r+0xf6>
 8003732:	9a07      	ldr	r2, [sp, #28]
 8003734:	4654      	mov	r4, sl
 8003736:	2000      	movs	r0, #0
 8003738:	f04f 0c0a 	mov.w	ip, #10
 800373c:	4621      	mov	r1, r4
 800373e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003742:	3b30      	subs	r3, #48	; 0x30
 8003744:	2b09      	cmp	r3, #9
 8003746:	d94e      	bls.n	80037e6 <_svfiprintf_r+0x17e>
 8003748:	b1b0      	cbz	r0, 8003778 <_svfiprintf_r+0x110>
 800374a:	9207      	str	r2, [sp, #28]
 800374c:	e014      	b.n	8003778 <_svfiprintf_r+0x110>
 800374e:	eba0 0308 	sub.w	r3, r0, r8
 8003752:	fa09 f303 	lsl.w	r3, r9, r3
 8003756:	4313      	orrs	r3, r2
 8003758:	9304      	str	r3, [sp, #16]
 800375a:	46a2      	mov	sl, r4
 800375c:	e7d2      	b.n	8003704 <_svfiprintf_r+0x9c>
 800375e:	9b03      	ldr	r3, [sp, #12]
 8003760:	1d19      	adds	r1, r3, #4
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	9103      	str	r1, [sp, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	bfbb      	ittet	lt
 800376a:	425b      	neglt	r3, r3
 800376c:	f042 0202 	orrlt.w	r2, r2, #2
 8003770:	9307      	strge	r3, [sp, #28]
 8003772:	9307      	strlt	r3, [sp, #28]
 8003774:	bfb8      	it	lt
 8003776:	9204      	strlt	r2, [sp, #16]
 8003778:	7823      	ldrb	r3, [r4, #0]
 800377a:	2b2e      	cmp	r3, #46	; 0x2e
 800377c:	d10c      	bne.n	8003798 <_svfiprintf_r+0x130>
 800377e:	7863      	ldrb	r3, [r4, #1]
 8003780:	2b2a      	cmp	r3, #42	; 0x2a
 8003782:	d135      	bne.n	80037f0 <_svfiprintf_r+0x188>
 8003784:	9b03      	ldr	r3, [sp, #12]
 8003786:	1d1a      	adds	r2, r3, #4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	9203      	str	r2, [sp, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	bfb8      	it	lt
 8003790:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003794:	3402      	adds	r4, #2
 8003796:	9305      	str	r3, [sp, #20]
 8003798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003864 <_svfiprintf_r+0x1fc>
 800379c:	7821      	ldrb	r1, [r4, #0]
 800379e:	2203      	movs	r2, #3
 80037a0:	4650      	mov	r0, sl
 80037a2:	f7fc fd1d 	bl	80001e0 <memchr>
 80037a6:	b140      	cbz	r0, 80037ba <_svfiprintf_r+0x152>
 80037a8:	2340      	movs	r3, #64	; 0x40
 80037aa:	eba0 000a 	sub.w	r0, r0, sl
 80037ae:	fa03 f000 	lsl.w	r0, r3, r0
 80037b2:	9b04      	ldr	r3, [sp, #16]
 80037b4:	4303      	orrs	r3, r0
 80037b6:	3401      	adds	r4, #1
 80037b8:	9304      	str	r3, [sp, #16]
 80037ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037be:	4826      	ldr	r0, [pc, #152]	; (8003858 <_svfiprintf_r+0x1f0>)
 80037c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037c4:	2206      	movs	r2, #6
 80037c6:	f7fc fd0b 	bl	80001e0 <memchr>
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d038      	beq.n	8003840 <_svfiprintf_r+0x1d8>
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <_svfiprintf_r+0x1f4>)
 80037d0:	bb1b      	cbnz	r3, 800381a <_svfiprintf_r+0x1b2>
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	3307      	adds	r3, #7
 80037d6:	f023 0307 	bic.w	r3, r3, #7
 80037da:	3308      	adds	r3, #8
 80037dc:	9303      	str	r3, [sp, #12]
 80037de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037e0:	4433      	add	r3, r6
 80037e2:	9309      	str	r3, [sp, #36]	; 0x24
 80037e4:	e767      	b.n	80036b6 <_svfiprintf_r+0x4e>
 80037e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80037ea:	460c      	mov	r4, r1
 80037ec:	2001      	movs	r0, #1
 80037ee:	e7a5      	b.n	800373c <_svfiprintf_r+0xd4>
 80037f0:	2300      	movs	r3, #0
 80037f2:	3401      	adds	r4, #1
 80037f4:	9305      	str	r3, [sp, #20]
 80037f6:	4619      	mov	r1, r3
 80037f8:	f04f 0c0a 	mov.w	ip, #10
 80037fc:	4620      	mov	r0, r4
 80037fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003802:	3a30      	subs	r2, #48	; 0x30
 8003804:	2a09      	cmp	r2, #9
 8003806:	d903      	bls.n	8003810 <_svfiprintf_r+0x1a8>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0c5      	beq.n	8003798 <_svfiprintf_r+0x130>
 800380c:	9105      	str	r1, [sp, #20]
 800380e:	e7c3      	b.n	8003798 <_svfiprintf_r+0x130>
 8003810:	fb0c 2101 	mla	r1, ip, r1, r2
 8003814:	4604      	mov	r4, r0
 8003816:	2301      	movs	r3, #1
 8003818:	e7f0      	b.n	80037fc <_svfiprintf_r+0x194>
 800381a:	ab03      	add	r3, sp, #12
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	462a      	mov	r2, r5
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <_svfiprintf_r+0x1f8>)
 8003822:	a904      	add	r1, sp, #16
 8003824:	4638      	mov	r0, r7
 8003826:	f3af 8000 	nop.w
 800382a:	1c42      	adds	r2, r0, #1
 800382c:	4606      	mov	r6, r0
 800382e:	d1d6      	bne.n	80037de <_svfiprintf_r+0x176>
 8003830:	89ab      	ldrh	r3, [r5, #12]
 8003832:	065b      	lsls	r3, r3, #25
 8003834:	f53f af2c 	bmi.w	8003690 <_svfiprintf_r+0x28>
 8003838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800383a:	b01d      	add	sp, #116	; 0x74
 800383c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003840:	ab03      	add	r3, sp, #12
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	462a      	mov	r2, r5
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <_svfiprintf_r+0x1f8>)
 8003848:	a904      	add	r1, sp, #16
 800384a:	4638      	mov	r0, r7
 800384c:	f000 f87a 	bl	8003944 <_printf_i>
 8003850:	e7eb      	b.n	800382a <_svfiprintf_r+0x1c2>
 8003852:	bf00      	nop
 8003854:	08003e90 	.word	0x08003e90
 8003858:	08003e9a 	.word	0x08003e9a
 800385c:	00000000 	.word	0x00000000
 8003860:	080035b1 	.word	0x080035b1
 8003864:	08003e96 	.word	0x08003e96

08003868 <_printf_common>:
 8003868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	4616      	mov	r6, r2
 800386e:	4699      	mov	r9, r3
 8003870:	688a      	ldr	r2, [r1, #8]
 8003872:	690b      	ldr	r3, [r1, #16]
 8003874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003878:	4293      	cmp	r3, r2
 800387a:	bfb8      	it	lt
 800387c:	4613      	movlt	r3, r2
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003884:	4607      	mov	r7, r0
 8003886:	460c      	mov	r4, r1
 8003888:	b10a      	cbz	r2, 800388e <_printf_common+0x26>
 800388a:	3301      	adds	r3, #1
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	0699      	lsls	r1, r3, #26
 8003892:	bf42      	ittt	mi
 8003894:	6833      	ldrmi	r3, [r6, #0]
 8003896:	3302      	addmi	r3, #2
 8003898:	6033      	strmi	r3, [r6, #0]
 800389a:	6825      	ldr	r5, [r4, #0]
 800389c:	f015 0506 	ands.w	r5, r5, #6
 80038a0:	d106      	bne.n	80038b0 <_printf_common+0x48>
 80038a2:	f104 0a19 	add.w	sl, r4, #25
 80038a6:	68e3      	ldr	r3, [r4, #12]
 80038a8:	6832      	ldr	r2, [r6, #0]
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	42ab      	cmp	r3, r5
 80038ae:	dc26      	bgt.n	80038fe <_printf_common+0x96>
 80038b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038b4:	1e13      	subs	r3, r2, #0
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	bf18      	it	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	0692      	lsls	r2, r2, #26
 80038be:	d42b      	bmi.n	8003918 <_printf_common+0xb0>
 80038c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038c4:	4649      	mov	r1, r9
 80038c6:	4638      	mov	r0, r7
 80038c8:	47c0      	blx	r8
 80038ca:	3001      	adds	r0, #1
 80038cc:	d01e      	beq.n	800390c <_printf_common+0xa4>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	68e5      	ldr	r5, [r4, #12]
 80038d2:	6832      	ldr	r2, [r6, #0]
 80038d4:	f003 0306 	and.w	r3, r3, #6
 80038d8:	2b04      	cmp	r3, #4
 80038da:	bf08      	it	eq
 80038dc:	1aad      	subeq	r5, r5, r2
 80038de:	68a3      	ldr	r3, [r4, #8]
 80038e0:	6922      	ldr	r2, [r4, #16]
 80038e2:	bf0c      	ite	eq
 80038e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e8:	2500      	movne	r5, #0
 80038ea:	4293      	cmp	r3, r2
 80038ec:	bfc4      	itt	gt
 80038ee:	1a9b      	subgt	r3, r3, r2
 80038f0:	18ed      	addgt	r5, r5, r3
 80038f2:	2600      	movs	r6, #0
 80038f4:	341a      	adds	r4, #26
 80038f6:	42b5      	cmp	r5, r6
 80038f8:	d11a      	bne.n	8003930 <_printf_common+0xc8>
 80038fa:	2000      	movs	r0, #0
 80038fc:	e008      	b.n	8003910 <_printf_common+0xa8>
 80038fe:	2301      	movs	r3, #1
 8003900:	4652      	mov	r2, sl
 8003902:	4649      	mov	r1, r9
 8003904:	4638      	mov	r0, r7
 8003906:	47c0      	blx	r8
 8003908:	3001      	adds	r0, #1
 800390a:	d103      	bne.n	8003914 <_printf_common+0xac>
 800390c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003914:	3501      	adds	r5, #1
 8003916:	e7c6      	b.n	80038a6 <_printf_common+0x3e>
 8003918:	18e1      	adds	r1, r4, r3
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	2030      	movs	r0, #48	; 0x30
 800391e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003922:	4422      	add	r2, r4
 8003924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800392c:	3302      	adds	r3, #2
 800392e:	e7c7      	b.n	80038c0 <_printf_common+0x58>
 8003930:	2301      	movs	r3, #1
 8003932:	4622      	mov	r2, r4
 8003934:	4649      	mov	r1, r9
 8003936:	4638      	mov	r0, r7
 8003938:	47c0      	blx	r8
 800393a:	3001      	adds	r0, #1
 800393c:	d0e6      	beq.n	800390c <_printf_common+0xa4>
 800393e:	3601      	adds	r6, #1
 8003940:	e7d9      	b.n	80038f6 <_printf_common+0x8e>
	...

08003944 <_printf_i>:
 8003944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	7e0f      	ldrb	r7, [r1, #24]
 800394a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800394c:	2f78      	cmp	r7, #120	; 0x78
 800394e:	4691      	mov	r9, r2
 8003950:	4680      	mov	r8, r0
 8003952:	460c      	mov	r4, r1
 8003954:	469a      	mov	sl, r3
 8003956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800395a:	d807      	bhi.n	800396c <_printf_i+0x28>
 800395c:	2f62      	cmp	r7, #98	; 0x62
 800395e:	d80a      	bhi.n	8003976 <_printf_i+0x32>
 8003960:	2f00      	cmp	r7, #0
 8003962:	f000 80d8 	beq.w	8003b16 <_printf_i+0x1d2>
 8003966:	2f58      	cmp	r7, #88	; 0x58
 8003968:	f000 80a3 	beq.w	8003ab2 <_printf_i+0x16e>
 800396c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003974:	e03a      	b.n	80039ec <_printf_i+0xa8>
 8003976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800397a:	2b15      	cmp	r3, #21
 800397c:	d8f6      	bhi.n	800396c <_printf_i+0x28>
 800397e:	a101      	add	r1, pc, #4	; (adr r1, 8003984 <_printf_i+0x40>)
 8003980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003984:	080039dd 	.word	0x080039dd
 8003988:	080039f1 	.word	0x080039f1
 800398c:	0800396d 	.word	0x0800396d
 8003990:	0800396d 	.word	0x0800396d
 8003994:	0800396d 	.word	0x0800396d
 8003998:	0800396d 	.word	0x0800396d
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	0800396d 	.word	0x0800396d
 80039a4:	0800396d 	.word	0x0800396d
 80039a8:	0800396d 	.word	0x0800396d
 80039ac:	0800396d 	.word	0x0800396d
 80039b0:	08003afd 	.word	0x08003afd
 80039b4:	08003a21 	.word	0x08003a21
 80039b8:	08003adf 	.word	0x08003adf
 80039bc:	0800396d 	.word	0x0800396d
 80039c0:	0800396d 	.word	0x0800396d
 80039c4:	08003b1f 	.word	0x08003b1f
 80039c8:	0800396d 	.word	0x0800396d
 80039cc:	08003a21 	.word	0x08003a21
 80039d0:	0800396d 	.word	0x0800396d
 80039d4:	0800396d 	.word	0x0800396d
 80039d8:	08003ae7 	.word	0x08003ae7
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	602a      	str	r2, [r5, #0]
 80039e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0a3      	b.n	8003b38 <_printf_i+0x1f4>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	6829      	ldr	r1, [r5, #0]
 80039f4:	0606      	lsls	r6, r0, #24
 80039f6:	f101 0304 	add.w	r3, r1, #4
 80039fa:	d50a      	bpl.n	8003a12 <_printf_i+0xce>
 80039fc:	680e      	ldr	r6, [r1, #0]
 80039fe:	602b      	str	r3, [r5, #0]
 8003a00:	2e00      	cmp	r6, #0
 8003a02:	da03      	bge.n	8003a0c <_printf_i+0xc8>
 8003a04:	232d      	movs	r3, #45	; 0x2d
 8003a06:	4276      	negs	r6, r6
 8003a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a0c:	485e      	ldr	r0, [pc, #376]	; (8003b88 <_printf_i+0x244>)
 8003a0e:	230a      	movs	r3, #10
 8003a10:	e019      	b.n	8003a46 <_printf_i+0x102>
 8003a12:	680e      	ldr	r6, [r1, #0]
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a1a:	bf18      	it	ne
 8003a1c:	b236      	sxthne	r6, r6
 8003a1e:	e7ef      	b.n	8003a00 <_printf_i+0xbc>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	6820      	ldr	r0, [r4, #0]
 8003a24:	1d19      	adds	r1, r3, #4
 8003a26:	6029      	str	r1, [r5, #0]
 8003a28:	0601      	lsls	r1, r0, #24
 8003a2a:	d501      	bpl.n	8003a30 <_printf_i+0xec>
 8003a2c:	681e      	ldr	r6, [r3, #0]
 8003a2e:	e002      	b.n	8003a36 <_printf_i+0xf2>
 8003a30:	0646      	lsls	r6, r0, #25
 8003a32:	d5fb      	bpl.n	8003a2c <_printf_i+0xe8>
 8003a34:	881e      	ldrh	r6, [r3, #0]
 8003a36:	4854      	ldr	r0, [pc, #336]	; (8003b88 <_printf_i+0x244>)
 8003a38:	2f6f      	cmp	r7, #111	; 0x6f
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2308      	moveq	r3, #8
 8003a3e:	230a      	movne	r3, #10
 8003a40:	2100      	movs	r1, #0
 8003a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a46:	6865      	ldr	r5, [r4, #4]
 8003a48:	60a5      	str	r5, [r4, #8]
 8003a4a:	2d00      	cmp	r5, #0
 8003a4c:	bfa2      	ittt	ge
 8003a4e:	6821      	ldrge	r1, [r4, #0]
 8003a50:	f021 0104 	bicge.w	r1, r1, #4
 8003a54:	6021      	strge	r1, [r4, #0]
 8003a56:	b90e      	cbnz	r6, 8003a5c <_printf_i+0x118>
 8003a58:	2d00      	cmp	r5, #0
 8003a5a:	d04d      	beq.n	8003af8 <_printf_i+0x1b4>
 8003a5c:	4615      	mov	r5, r2
 8003a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a62:	fb03 6711 	mls	r7, r3, r1, r6
 8003a66:	5dc7      	ldrb	r7, [r0, r7]
 8003a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a6c:	4637      	mov	r7, r6
 8003a6e:	42bb      	cmp	r3, r7
 8003a70:	460e      	mov	r6, r1
 8003a72:	d9f4      	bls.n	8003a5e <_printf_i+0x11a>
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d10b      	bne.n	8003a90 <_printf_i+0x14c>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	07de      	lsls	r6, r3, #31
 8003a7c:	d508      	bpl.n	8003a90 <_printf_i+0x14c>
 8003a7e:	6923      	ldr	r3, [r4, #16]
 8003a80:	6861      	ldr	r1, [r4, #4]
 8003a82:	4299      	cmp	r1, r3
 8003a84:	bfde      	ittt	le
 8003a86:	2330      	movle	r3, #48	; 0x30
 8003a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003a90:	1b52      	subs	r2, r2, r5
 8003a92:	6122      	str	r2, [r4, #16]
 8003a94:	f8cd a000 	str.w	sl, [sp]
 8003a98:	464b      	mov	r3, r9
 8003a9a:	aa03      	add	r2, sp, #12
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	f7ff fee2 	bl	8003868 <_printf_common>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d14c      	bne.n	8003b42 <_printf_i+0x1fe>
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aac:	b004      	add	sp, #16
 8003aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab2:	4835      	ldr	r0, [pc, #212]	; (8003b88 <_printf_i+0x244>)
 8003ab4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ab8:	6829      	ldr	r1, [r5, #0]
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ac0:	6029      	str	r1, [r5, #0]
 8003ac2:	061d      	lsls	r5, r3, #24
 8003ac4:	d514      	bpl.n	8003af0 <_printf_i+0x1ac>
 8003ac6:	07df      	lsls	r7, r3, #31
 8003ac8:	bf44      	itt	mi
 8003aca:	f043 0320 	orrmi.w	r3, r3, #32
 8003ace:	6023      	strmi	r3, [r4, #0]
 8003ad0:	b91e      	cbnz	r6, 8003ada <_printf_i+0x196>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	f023 0320 	bic.w	r3, r3, #32
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	2310      	movs	r3, #16
 8003adc:	e7b0      	b.n	8003a40 <_printf_i+0xfc>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	f043 0320 	orr.w	r3, r3, #32
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	2378      	movs	r3, #120	; 0x78
 8003ae8:	4828      	ldr	r0, [pc, #160]	; (8003b8c <_printf_i+0x248>)
 8003aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aee:	e7e3      	b.n	8003ab8 <_printf_i+0x174>
 8003af0:	0659      	lsls	r1, r3, #25
 8003af2:	bf48      	it	mi
 8003af4:	b2b6      	uxthmi	r6, r6
 8003af6:	e7e6      	b.n	8003ac6 <_printf_i+0x182>
 8003af8:	4615      	mov	r5, r2
 8003afa:	e7bb      	b.n	8003a74 <_printf_i+0x130>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	6826      	ldr	r6, [r4, #0]
 8003b00:	6961      	ldr	r1, [r4, #20]
 8003b02:	1d18      	adds	r0, r3, #4
 8003b04:	6028      	str	r0, [r5, #0]
 8003b06:	0635      	lsls	r5, r6, #24
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	d501      	bpl.n	8003b10 <_printf_i+0x1cc>
 8003b0c:	6019      	str	r1, [r3, #0]
 8003b0e:	e002      	b.n	8003b16 <_printf_i+0x1d2>
 8003b10:	0670      	lsls	r0, r6, #25
 8003b12:	d5fb      	bpl.n	8003b0c <_printf_i+0x1c8>
 8003b14:	8019      	strh	r1, [r3, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	6123      	str	r3, [r4, #16]
 8003b1a:	4615      	mov	r5, r2
 8003b1c:	e7ba      	b.n	8003a94 <_printf_i+0x150>
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	1d1a      	adds	r2, r3, #4
 8003b22:	602a      	str	r2, [r5, #0]
 8003b24:	681d      	ldr	r5, [r3, #0]
 8003b26:	6862      	ldr	r2, [r4, #4]
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f7fc fb58 	bl	80001e0 <memchr>
 8003b30:	b108      	cbz	r0, 8003b36 <_printf_i+0x1f2>
 8003b32:	1b40      	subs	r0, r0, r5
 8003b34:	6060      	str	r0, [r4, #4]
 8003b36:	6863      	ldr	r3, [r4, #4]
 8003b38:	6123      	str	r3, [r4, #16]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b40:	e7a8      	b.n	8003a94 <_printf_i+0x150>
 8003b42:	6923      	ldr	r3, [r4, #16]
 8003b44:	462a      	mov	r2, r5
 8003b46:	4649      	mov	r1, r9
 8003b48:	4640      	mov	r0, r8
 8003b4a:	47d0      	blx	sl
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d0ab      	beq.n	8003aa8 <_printf_i+0x164>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	079b      	lsls	r3, r3, #30
 8003b54:	d413      	bmi.n	8003b7e <_printf_i+0x23a>
 8003b56:	68e0      	ldr	r0, [r4, #12]
 8003b58:	9b03      	ldr	r3, [sp, #12]
 8003b5a:	4298      	cmp	r0, r3
 8003b5c:	bfb8      	it	lt
 8003b5e:	4618      	movlt	r0, r3
 8003b60:	e7a4      	b.n	8003aac <_printf_i+0x168>
 8003b62:	2301      	movs	r3, #1
 8003b64:	4632      	mov	r2, r6
 8003b66:	4649      	mov	r1, r9
 8003b68:	4640      	mov	r0, r8
 8003b6a:	47d0      	blx	sl
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d09b      	beq.n	8003aa8 <_printf_i+0x164>
 8003b70:	3501      	adds	r5, #1
 8003b72:	68e3      	ldr	r3, [r4, #12]
 8003b74:	9903      	ldr	r1, [sp, #12]
 8003b76:	1a5b      	subs	r3, r3, r1
 8003b78:	42ab      	cmp	r3, r5
 8003b7a:	dcf2      	bgt.n	8003b62 <_printf_i+0x21e>
 8003b7c:	e7eb      	b.n	8003b56 <_printf_i+0x212>
 8003b7e:	2500      	movs	r5, #0
 8003b80:	f104 0619 	add.w	r6, r4, #25
 8003b84:	e7f5      	b.n	8003b72 <_printf_i+0x22e>
 8003b86:	bf00      	nop
 8003b88:	08003ea1 	.word	0x08003ea1
 8003b8c:	08003eb2 	.word	0x08003eb2

08003b90 <memcpy>:
 8003b90:	440a      	add	r2, r1
 8003b92:	4291      	cmp	r1, r2
 8003b94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b98:	d100      	bne.n	8003b9c <memcpy+0xc>
 8003b9a:	4770      	bx	lr
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ba6:	4291      	cmp	r1, r2
 8003ba8:	d1f9      	bne.n	8003b9e <memcpy+0xe>
 8003baa:	bd10      	pop	{r4, pc}

08003bac <memmove>:
 8003bac:	4288      	cmp	r0, r1
 8003bae:	b510      	push	{r4, lr}
 8003bb0:	eb01 0402 	add.w	r4, r1, r2
 8003bb4:	d902      	bls.n	8003bbc <memmove+0x10>
 8003bb6:	4284      	cmp	r4, r0
 8003bb8:	4623      	mov	r3, r4
 8003bba:	d807      	bhi.n	8003bcc <memmove+0x20>
 8003bbc:	1e43      	subs	r3, r0, #1
 8003bbe:	42a1      	cmp	r1, r4
 8003bc0:	d008      	beq.n	8003bd4 <memmove+0x28>
 8003bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bca:	e7f8      	b.n	8003bbe <memmove+0x12>
 8003bcc:	4402      	add	r2, r0
 8003bce:	4601      	mov	r1, r0
 8003bd0:	428a      	cmp	r2, r1
 8003bd2:	d100      	bne.n	8003bd6 <memmove+0x2a>
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bde:	e7f7      	b.n	8003bd0 <memmove+0x24>

08003be0 <_free_r>:
 8003be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003be2:	2900      	cmp	r1, #0
 8003be4:	d044      	beq.n	8003c70 <_free_r+0x90>
 8003be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bea:	9001      	str	r0, [sp, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f1a1 0404 	sub.w	r4, r1, #4
 8003bf2:	bfb8      	it	lt
 8003bf4:	18e4      	addlt	r4, r4, r3
 8003bf6:	f000 f913 	bl	8003e20 <__malloc_lock>
 8003bfa:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <_free_r+0x94>)
 8003bfc:	9801      	ldr	r0, [sp, #4]
 8003bfe:	6813      	ldr	r3, [r2, #0]
 8003c00:	b933      	cbnz	r3, 8003c10 <_free_r+0x30>
 8003c02:	6063      	str	r3, [r4, #4]
 8003c04:	6014      	str	r4, [r2, #0]
 8003c06:	b003      	add	sp, #12
 8003c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c0c:	f000 b90e 	b.w	8003e2c <__malloc_unlock>
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	d908      	bls.n	8003c26 <_free_r+0x46>
 8003c14:	6825      	ldr	r5, [r4, #0]
 8003c16:	1961      	adds	r1, r4, r5
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	bf01      	itttt	eq
 8003c1c:	6819      	ldreq	r1, [r3, #0]
 8003c1e:	685b      	ldreq	r3, [r3, #4]
 8003c20:	1949      	addeq	r1, r1, r5
 8003c22:	6021      	streq	r1, [r4, #0]
 8003c24:	e7ed      	b.n	8003c02 <_free_r+0x22>
 8003c26:	461a      	mov	r2, r3
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	b10b      	cbz	r3, 8003c30 <_free_r+0x50>
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	d9fa      	bls.n	8003c26 <_free_r+0x46>
 8003c30:	6811      	ldr	r1, [r2, #0]
 8003c32:	1855      	adds	r5, r2, r1
 8003c34:	42a5      	cmp	r5, r4
 8003c36:	d10b      	bne.n	8003c50 <_free_r+0x70>
 8003c38:	6824      	ldr	r4, [r4, #0]
 8003c3a:	4421      	add	r1, r4
 8003c3c:	1854      	adds	r4, r2, r1
 8003c3e:	42a3      	cmp	r3, r4
 8003c40:	6011      	str	r1, [r2, #0]
 8003c42:	d1e0      	bne.n	8003c06 <_free_r+0x26>
 8003c44:	681c      	ldr	r4, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	6053      	str	r3, [r2, #4]
 8003c4a:	4421      	add	r1, r4
 8003c4c:	6011      	str	r1, [r2, #0]
 8003c4e:	e7da      	b.n	8003c06 <_free_r+0x26>
 8003c50:	d902      	bls.n	8003c58 <_free_r+0x78>
 8003c52:	230c      	movs	r3, #12
 8003c54:	6003      	str	r3, [r0, #0]
 8003c56:	e7d6      	b.n	8003c06 <_free_r+0x26>
 8003c58:	6825      	ldr	r5, [r4, #0]
 8003c5a:	1961      	adds	r1, r4, r5
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	bf04      	itt	eq
 8003c60:	6819      	ldreq	r1, [r3, #0]
 8003c62:	685b      	ldreq	r3, [r3, #4]
 8003c64:	6063      	str	r3, [r4, #4]
 8003c66:	bf04      	itt	eq
 8003c68:	1949      	addeq	r1, r1, r5
 8003c6a:	6021      	streq	r1, [r4, #0]
 8003c6c:	6054      	str	r4, [r2, #4]
 8003c6e:	e7ca      	b.n	8003c06 <_free_r+0x26>
 8003c70:	b003      	add	sp, #12
 8003c72:	bd30      	pop	{r4, r5, pc}
 8003c74:	2000013c 	.word	0x2000013c

08003c78 <sbrk_aligned>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	4e0e      	ldr	r6, [pc, #56]	; (8003cb4 <sbrk_aligned+0x3c>)
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	6831      	ldr	r1, [r6, #0]
 8003c80:	4605      	mov	r5, r0
 8003c82:	b911      	cbnz	r1, 8003c8a <sbrk_aligned+0x12>
 8003c84:	f000 f8bc 	bl	8003e00 <_sbrk_r>
 8003c88:	6030      	str	r0, [r6, #0]
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f000 f8b7 	bl	8003e00 <_sbrk_r>
 8003c92:	1c43      	adds	r3, r0, #1
 8003c94:	d00a      	beq.n	8003cac <sbrk_aligned+0x34>
 8003c96:	1cc4      	adds	r4, r0, #3
 8003c98:	f024 0403 	bic.w	r4, r4, #3
 8003c9c:	42a0      	cmp	r0, r4
 8003c9e:	d007      	beq.n	8003cb0 <sbrk_aligned+0x38>
 8003ca0:	1a21      	subs	r1, r4, r0
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f000 f8ac 	bl	8003e00 <_sbrk_r>
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d101      	bne.n	8003cb0 <sbrk_aligned+0x38>
 8003cac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	20000140 	.word	0x20000140

08003cb8 <_malloc_r>:
 8003cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cbc:	1ccd      	adds	r5, r1, #3
 8003cbe:	f025 0503 	bic.w	r5, r5, #3
 8003cc2:	3508      	adds	r5, #8
 8003cc4:	2d0c      	cmp	r5, #12
 8003cc6:	bf38      	it	cc
 8003cc8:	250c      	movcc	r5, #12
 8003cca:	2d00      	cmp	r5, #0
 8003ccc:	4607      	mov	r7, r0
 8003cce:	db01      	blt.n	8003cd4 <_malloc_r+0x1c>
 8003cd0:	42a9      	cmp	r1, r5
 8003cd2:	d905      	bls.n	8003ce0 <_malloc_r+0x28>
 8003cd4:	230c      	movs	r3, #12
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	2600      	movs	r6, #0
 8003cda:	4630      	mov	r0, r6
 8003cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ce0:	4e2e      	ldr	r6, [pc, #184]	; (8003d9c <_malloc_r+0xe4>)
 8003ce2:	f000 f89d 	bl	8003e20 <__malloc_lock>
 8003ce6:	6833      	ldr	r3, [r6, #0]
 8003ce8:	461c      	mov	r4, r3
 8003cea:	bb34      	cbnz	r4, 8003d3a <_malloc_r+0x82>
 8003cec:	4629      	mov	r1, r5
 8003cee:	4638      	mov	r0, r7
 8003cf0:	f7ff ffc2 	bl	8003c78 <sbrk_aligned>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	d14d      	bne.n	8003d96 <_malloc_r+0xde>
 8003cfa:	6834      	ldr	r4, [r6, #0]
 8003cfc:	4626      	mov	r6, r4
 8003cfe:	2e00      	cmp	r6, #0
 8003d00:	d140      	bne.n	8003d84 <_malloc_r+0xcc>
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	4631      	mov	r1, r6
 8003d06:	4638      	mov	r0, r7
 8003d08:	eb04 0803 	add.w	r8, r4, r3
 8003d0c:	f000 f878 	bl	8003e00 <_sbrk_r>
 8003d10:	4580      	cmp	r8, r0
 8003d12:	d13a      	bne.n	8003d8a <_malloc_r+0xd2>
 8003d14:	6821      	ldr	r1, [r4, #0]
 8003d16:	3503      	adds	r5, #3
 8003d18:	1a6d      	subs	r5, r5, r1
 8003d1a:	f025 0503 	bic.w	r5, r5, #3
 8003d1e:	3508      	adds	r5, #8
 8003d20:	2d0c      	cmp	r5, #12
 8003d22:	bf38      	it	cc
 8003d24:	250c      	movcc	r5, #12
 8003d26:	4629      	mov	r1, r5
 8003d28:	4638      	mov	r0, r7
 8003d2a:	f7ff ffa5 	bl	8003c78 <sbrk_aligned>
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d02b      	beq.n	8003d8a <_malloc_r+0xd2>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	442b      	add	r3, r5
 8003d36:	6023      	str	r3, [r4, #0]
 8003d38:	e00e      	b.n	8003d58 <_malloc_r+0xa0>
 8003d3a:	6822      	ldr	r2, [r4, #0]
 8003d3c:	1b52      	subs	r2, r2, r5
 8003d3e:	d41e      	bmi.n	8003d7e <_malloc_r+0xc6>
 8003d40:	2a0b      	cmp	r2, #11
 8003d42:	d916      	bls.n	8003d72 <_malloc_r+0xba>
 8003d44:	1961      	adds	r1, r4, r5
 8003d46:	42a3      	cmp	r3, r4
 8003d48:	6025      	str	r5, [r4, #0]
 8003d4a:	bf18      	it	ne
 8003d4c:	6059      	strne	r1, [r3, #4]
 8003d4e:	6863      	ldr	r3, [r4, #4]
 8003d50:	bf08      	it	eq
 8003d52:	6031      	streq	r1, [r6, #0]
 8003d54:	5162      	str	r2, [r4, r5]
 8003d56:	604b      	str	r3, [r1, #4]
 8003d58:	4638      	mov	r0, r7
 8003d5a:	f104 060b 	add.w	r6, r4, #11
 8003d5e:	f000 f865 	bl	8003e2c <__malloc_unlock>
 8003d62:	f026 0607 	bic.w	r6, r6, #7
 8003d66:	1d23      	adds	r3, r4, #4
 8003d68:	1af2      	subs	r2, r6, r3
 8003d6a:	d0b6      	beq.n	8003cda <_malloc_r+0x22>
 8003d6c:	1b9b      	subs	r3, r3, r6
 8003d6e:	50a3      	str	r3, [r4, r2]
 8003d70:	e7b3      	b.n	8003cda <_malloc_r+0x22>
 8003d72:	6862      	ldr	r2, [r4, #4]
 8003d74:	42a3      	cmp	r3, r4
 8003d76:	bf0c      	ite	eq
 8003d78:	6032      	streq	r2, [r6, #0]
 8003d7a:	605a      	strne	r2, [r3, #4]
 8003d7c:	e7ec      	b.n	8003d58 <_malloc_r+0xa0>
 8003d7e:	4623      	mov	r3, r4
 8003d80:	6864      	ldr	r4, [r4, #4]
 8003d82:	e7b2      	b.n	8003cea <_malloc_r+0x32>
 8003d84:	4634      	mov	r4, r6
 8003d86:	6876      	ldr	r6, [r6, #4]
 8003d88:	e7b9      	b.n	8003cfe <_malloc_r+0x46>
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f000 f84c 	bl	8003e2c <__malloc_unlock>
 8003d94:	e7a1      	b.n	8003cda <_malloc_r+0x22>
 8003d96:	6025      	str	r5, [r4, #0]
 8003d98:	e7de      	b.n	8003d58 <_malloc_r+0xa0>
 8003d9a:	bf00      	nop
 8003d9c:	2000013c 	.word	0x2000013c

08003da0 <_realloc_r>:
 8003da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da4:	4680      	mov	r8, r0
 8003da6:	4614      	mov	r4, r2
 8003da8:	460e      	mov	r6, r1
 8003daa:	b921      	cbnz	r1, 8003db6 <_realloc_r+0x16>
 8003dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003db0:	4611      	mov	r1, r2
 8003db2:	f7ff bf81 	b.w	8003cb8 <_malloc_r>
 8003db6:	b92a      	cbnz	r2, 8003dc4 <_realloc_r+0x24>
 8003db8:	f7ff ff12 	bl	8003be0 <_free_r>
 8003dbc:	4625      	mov	r5, r4
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dc4:	f000 f838 	bl	8003e38 <_malloc_usable_size_r>
 8003dc8:	4284      	cmp	r4, r0
 8003dca:	4607      	mov	r7, r0
 8003dcc:	d802      	bhi.n	8003dd4 <_realloc_r+0x34>
 8003dce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dd2:	d812      	bhi.n	8003dfa <_realloc_r+0x5a>
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	f7ff ff6e 	bl	8003cb8 <_malloc_r>
 8003ddc:	4605      	mov	r5, r0
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d0ed      	beq.n	8003dbe <_realloc_r+0x1e>
 8003de2:	42bc      	cmp	r4, r7
 8003de4:	4622      	mov	r2, r4
 8003de6:	4631      	mov	r1, r6
 8003de8:	bf28      	it	cs
 8003dea:	463a      	movcs	r2, r7
 8003dec:	f7ff fed0 	bl	8003b90 <memcpy>
 8003df0:	4631      	mov	r1, r6
 8003df2:	4640      	mov	r0, r8
 8003df4:	f7ff fef4 	bl	8003be0 <_free_r>
 8003df8:	e7e1      	b.n	8003dbe <_realloc_r+0x1e>
 8003dfa:	4635      	mov	r5, r6
 8003dfc:	e7df      	b.n	8003dbe <_realloc_r+0x1e>
	...

08003e00 <_sbrk_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4d06      	ldr	r5, [pc, #24]	; (8003e1c <_sbrk_r+0x1c>)
 8003e04:	2300      	movs	r3, #0
 8003e06:	4604      	mov	r4, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	602b      	str	r3, [r5, #0]
 8003e0c:	f7fc ffe4 	bl	8000dd8 <_sbrk>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d102      	bne.n	8003e1a <_sbrk_r+0x1a>
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	b103      	cbz	r3, 8003e1a <_sbrk_r+0x1a>
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	20000144 	.word	0x20000144

08003e20 <__malloc_lock>:
 8003e20:	4801      	ldr	r0, [pc, #4]	; (8003e28 <__malloc_lock+0x8>)
 8003e22:	f000 b811 	b.w	8003e48 <__retarget_lock_acquire_recursive>
 8003e26:	bf00      	nop
 8003e28:	20000148 	.word	0x20000148

08003e2c <__malloc_unlock>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	; (8003e34 <__malloc_unlock+0x8>)
 8003e2e:	f000 b80c 	b.w	8003e4a <__retarget_lock_release_recursive>
 8003e32:	bf00      	nop
 8003e34:	20000148 	.word	0x20000148

08003e38 <_malloc_usable_size_r>:
 8003e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e3c:	1f18      	subs	r0, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bfbc      	itt	lt
 8003e42:	580b      	ldrlt	r3, [r1, r0]
 8003e44:	18c0      	addlt	r0, r0, r3
 8003e46:	4770      	bx	lr

08003e48 <__retarget_lock_acquire_recursive>:
 8003e48:	4770      	bx	lr

08003e4a <__retarget_lock_release_recursive>:
 8003e4a:	4770      	bx	lr

08003e4c <_init>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr

08003e58 <_fini>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr
